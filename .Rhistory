data=foxes
)
precis(mod.group)
group.seq <- seq(1,9,0.1)
mu.modgroup <- link(mod.group, data=list(groupsize=group.seq))
mu.modgroup.mean <- apply(mu.modgroup, 2, mean)
mu.modgroup.PI <- apply(mu.modgroup, 2, PI, .89)
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mu.modgroup.mean, col='black')
shade(mu.modgroup.PI, group.seq)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
### AND NEITHER IS GROUP SIZE BUT SLIGHTLY MORE THAN TERRITORY SIZE... INTERESTING!
par(mfrow=c(1,2))
plot(precis(mod.terr))
abline(v=0, col="gray", lty=3, lwd=3)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
dev.off()
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.both)
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu = intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.both)
## Okay, now we'll plot territory size while keeping group size constant
mod.both.terr <- link(mod.both, data=data.frame(groupsize=mean(foxes$groupsize), area=terr.seq))
mod.both.terr.mean <- apply(mod.both.terr, 2, mean)
mod.both.terr.PI <- apply(mod.both.terr, 2, PI, .89)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
shade(mod.both.terr.PI, terr.seq, col = col.alpha("blue",0.5))
# Now we'll plot groupsize while keeping territory size constant
mod.both.group <- link(mod.both, data=data.frame(area=mean(foxes$area), groupsize=group.seq))
mod.both.group.mean <- apply(mod.both.group, 2, mean)
mod.both.group.PI <- apply(mod.both.group, 2, PI, .89)
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.both.group.mean, col='blue')
shade(mod.both.group.PI, group.seq, col = col.alpha("blue",0.5))
par(mfrow=c(1,3))
plot(precis(mod.both))
abline(v=0, col="gray", lty=3, lwd=3)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
shade(mod.both.terr.PI, terr.seq, col = col.alpha("blue",0.5))
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.both.group.mean, col='blue')
shade(mod.both.group.PI, group.seq, col = col.alpha("blue",0.5))
dev.off()
########################## 5H3 ################################
# So we start with body size as an additive function of avgfood and groupsize, per Richard's request
mod.foodgroup <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_food*avgfood,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.foodgroup)
## And now all three!
mod.all <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area + b_food*avgfood,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.all)
mod.all.group <- link(mod.all, data=data.frame(area=mean(foxes$area), avgfood=mean(foxes$avgfood), groupsize=group.seq))
mod.all.group.mean <- apply(mod.all.group, 2, mean)
mod.all.group.PI <- apply(mod.all.group, 2, PI, .89)
food.seq <- seq(0,1.5,0.1)
mod.all.food <- link(mod.all, data=data.frame(area=mean(foxes$area), groupsize=mean(foxes$groupsize), avgfood=food.seq))
mod.all.food.mean <- apply(mod.all.food, 2, mean)
mod.all.food.PI <- apply(mod.all.food, 2, PI, .89)
mod.all.area <- link(mod.all, data=data.frame(avgfood=mean(foxes$avgfood), groupsize=mean(foxes$groupsize), area=terr.seq))
mod.all.area.mean <- apply(mod.all.area, 2, mean)
mod.all.area.PI <- apply(mod.all.area, 2, PI, .89)
par(mfrow=c(2,3))
plot.new()
plot(precis(mod.all))
abline(v=0, col="gray", lty=2, lwd=3)
plot.new()
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.all.group.mean, col='blue')
shade(mod.all.group.PI, group.seq, col = col.alpha("blue",0.5))
plot(weight~avgfood, foxes, col='red')
lines(food.seq, mod.all.food.mean, col='blue')
shade(mod.all.food.PI, food.seq, col = col.alpha("blue",0.5))
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.all.area.mean, col='blue')
shade(mod.all.area.PI, terr.seq, col = col.alpha("blue",0.5))
plot(groupsize ~ area, data=foxes)
dev.off()
plot(groupsize ~ area, data=foxes)
## and then we look at average food variable
par(mfrow=c(1, 3))
plot(groupsize ~ area, data=foxes)
plot(groupsize ~ avgfood, data=foxes)
plot(avgfood ~ area, data=foxes)
mod.foodarea <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_terr*area + b_food*avgfood,
intercept ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.foodarea)
########################## 5H3 ################################
# So we start with body size as an additive function of avgfood and groupsize, per Richard's request
mod.foodgroup <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_food*avgfood,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.foodgroup)
df <- read.csv("~/Documents/git/ospree/analyses/output/ospree_clean.csv")
sort(unique(df$respvar))
budset <- df[(df$respvar=="daystobudset"),]
budset <- df[(df$respvar=="percentbudburst_dormancy"),]
View(budset)
## Load library
library(MASS)
library(rethinking)
## Load data
data(eagles)
dat <- eagles
## Convert letters to numbers
dat$P <- ifelse(dat$P == "S", 0, 1)
dat$A <- ifelse(dat$A == "I", 0, 1)
dat$V <- ifelse(dat$V == "S", 0, 1)
## Create proportion column
dat$prop <- dat$y / dat$n
## Inspect
head(dat)
## Model 1
m.eagles <- map2stan(
alist(
y ~ dbinom(n, p),
logit(p)  <-  a + bp * P + bv * V + ba * A,
a ~ dnorm(0, 10),
bp ~ dnorm(0, 5),
bv ~ dnorm(0, 5),
ba ~ dnorm(0, 5)
),
data = dat, iter = 4000, chains = 4)
## Obtain estimates
precis(m.eagles)
## Compare to previous model
compare(m.eagles, m2.eagles)
## Plot model predictions
dat.pred <- expand.grid(P = c(0, 1), A = c(0, 1), V = c(0, 1))
link.m.eagles <- link(m.eagles, data = dat.pred)
pred.p <- apply(link.m.eagles, 2, mean)
pred.p.HPDI <- apply(link.m.eagles, 2, HPDI, prob = .89)
par(mfrow = c(1, 2)) # will be adding another plot later
plot(0, 0, type = "n", xlab = "Pirate/Adult/Victim", ylab = "Success probability",
ylim = c(0, 1), xlim = c(1, 8), xaxt = "n", main = "m.eagles")
axis(1, at = 1:8, labels = c("0/0/0", "1/0/0", "0/1/0", "1/1/0", "0/0/1", "1/0/1", "0/1/1", "1/1/1"))
p <- by(dat$prop,
list(dat$P, dat$A, dat$V), mean)
## Plot model predictions
dat.pred <- expand.grid(P = c(0, 1), A = c(0, 1), V = c(0, 1))
link.m.eagles <- link(m.eagles, data = dat.pred)
pred.p <- apply(link.m.eagles, 2, mean)
pred.p.HPDI <- apply(link.m.eagles, 2, HPDI, prob = .89)
par(mfrow = c(1, 2)) # will be adding another plot later
plot(0, 0, type = "n", xlab = "Pirate/Adult/Victim", ylab = "Success probability",
ylim = c(0, 1), xlim = c(1, 8), xaxt = "n", main = "m.eagles")
axis(1, at = 1:8, labels = c("0/0/0", "1/0/0", "0/1/0", "1/1/0", "0/0/1", "1/0/1", "0/1/1", "1/1/1"))
p <- by(dat$prop,
list(dat$P, dat$A, dat$V), mean)
for(i in 1:nrow(dat)){
points(p[i] ~ c(i - .05), pch = 16, col = "black", cex = 1.2)
points(pred.p[i] ~ c(i + .05), pch = 16, col = "blue", cex = 1.2)
lines(x = rep(i + .05, 2), y = pred.p.HPDI[, i], col = rgb(0, 0, 1, alpha = .5), lwd = 2)
}
legend("topright", c("Observed", "Predicted"), col = c("blue", "black"), pch = 16)
quartz()
## Plot model predictions
dat.pred <- expand.grid(P = c(0, 1), A = c(0, 1), V = c(0, 1))
link.m.eagles <- link(m.eagles, data = dat.pred)
pred.p <- apply(link.m.eagles, 2, mean)
pred.p.HPDI <- apply(link.m.eagles, 2, HPDI, prob = .89)
par(mfrow = c(1, 2)) # will be adding another plot later
plot(0, 0, type = "n", xlab = "Pirate/Adult/Victim", ylab = "Success probability",
ylim = c(0, 1), xlim = c(1, 8), xaxt = "n", main = "m.eagles")
axis(1, at = 1:8, labels = c("0/0/0", "1/0/0", "0/1/0", "1/1/0", "0/0/1", "1/0/1", "0/1/1", "1/1/1"))
p <- by(dat$prop,
list(dat$P, dat$A, dat$V), mean)
for(i in 1:nrow(dat)){
points(p[i] ~ c(i - .05), pch = 16, col = "black", cex = 1.2)
points(pred.p[i] ~ c(i + .05), pch = 16, col = "blue", cex = 1.2)
lines(x = rep(i + .05, 2), y = pred.p.HPDI[, i], col = rgb(0, 0, 1, alpha = .5), lwd = 2)
}
legend("topright", c("Observed", "Predicted"), col = c("blue", "black"), pch = 16)
961+1315+1282+1653
1653/5211
3800*3
install.packages("swirl")
library(swirl)
18*40*52
170*5*52
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
# Setting working directory
setwd("~/Documents/git/regionalrisk/analyses/")
########################
#### get the data - must choose the dataframe for specific analyses
#fs<-read.csv("output/fs_allspp_dvr.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_five.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_original.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_fullleaf.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_midleaf.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_midleaf_temps.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_origtemps.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_longtemps.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_dvrtemps.csv", header=TRUE)
fs<-read.csv("output/fs_allspp_long.csv", header=TRUE)
fs<-subset(fs, select=c("lat", "long", "fs.count", "year", "species", "fs"))
mat<-read.csv("output/mat_MAM.csv", header=TRUE)
mat<-subset(mat, year>1950)
elev<-read.csv("output/fs_bb_sitedata.csv", header=TRUE)
elev<-subset(elev, year>1950)
nao<-read.csv("output/nao_NovApr.csv", header=TRUE)
nao<-subset(nao, year>1950)
elev<-dplyr::select(elev, species, LAT, LON, ALT)
elev<-elev%>%dplyr::rename(lat=LAT)%>%dplyr::rename(long=LON)%>%dplyr::rename(elev=ALT)
elev$lat.long<-paste(elev$lat, elev$long)
elev<-elev[!duplicated(elev),]
matelev<-full_join(elev, mat)
#### Get elevation information
matelev$cc<-ifelse(matelev$year<=1983&matelev$year>1950, 0, 1)
fs<-dplyr::select(fs, lat, long, species, fs.count, year)
fs<-fs[!duplicated(fs),]
fspreds<-full_join(matelev, fs)
fspreds<-na.omit(fspreds)
fspreds<-fspreds[!duplicated(fspreds),]
fspreds$elev<-ave(fspreds$elev, fspreds$lat.long)
fspreds<-fspreds[!duplicated(fspreds),]
nao<-dplyr::select(nao, year, nao)
nao<-nao[!duplicated(nao),]
fspreds<-full_join(fspreds, nao)
dist<-read.csv("output/dist_wgs.csv", header=TRUE)
dist<-dist%>%dplyr::rename(long=LONG)%>%dplyr::rename(lat=LAT)
fspreds<-full_join(fspreds, dist)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_five_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_fullleaf_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_midleaf_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_midleaftemps_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_longtemps_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvrtemps_allpred.csv", row.names = FALSE)
write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_long_allpred.csv", row.names = FALSE)
########################################################################################
###################### NOW FOR THE MODEL Plots #########################################
########################################################################################
setwd("~/Documents/git/regionalrisk")
#load("fullleaf_full.Rdata")
load("longtemps_full.Rdata")
modlongtemps<-as.data.frame(tidy(longtemps.full, prob=0.9))
rm(list=ls())
options(stringsAsFactors = FALSE)
## Libraries
library(rstan)
library(brms)
library(ggplot2)
library(egg)
library(RColorBrewer)
#library(sjmisc)
#library(sjPlot)
library(ggeffects)
library(broom)
library(dplyr)
########################################################################################
###################### NOW FOR THE MODEL Plots #########################################
########################################################################################
setwd("~/Documents/git/regionalrisk")
#load("fullleaf_full.Rdata")
load("longtemps_full.Rdata")
modlongtemps<-as.data.frame(tidy(longtemps.full, prob=0.9))
names(modlongtemps)<-c("term", "estimate", "error", "10%", "90%")
modlongtemps50<-as.data.frame(tidy(longtemps.full, prob=0.5))
names(modlongtemps50)<-c("term", "estimate", "error", "25%", "75%")
modlongtemps <- full_join(modlongtemps, modlongtemps50)
modlongtemps98<-as.data.frame(tidy(longtemps.full, prob=0.98))
names(modlongtemps98)<-c("term", "estimate", "error", "2%", "98%")
modlongtemps <- full_join(modlongtemps, modlongtemps98)
modlongtemps <- subset(modlongtemps, select=c("term", "estimate", "2%", "10%", "25%", "75%", "90%", "98%"))
write.csv(modlongtemps, file="~/Documents/git/regionalrisk/analyses/output/longtemps_full_modeloutput.csv", row.names=FALSE)
### Now to make the plots
modoutput <- modlongtemps98 #modelhere
cols <- colorRampPalette(brewer.pal(7,"Accent"))(6)
modoutput$term <- ifelse(modoutput$term=="b_Intercept", "b_speciesAESHIP", modoutput$term)
modoutput<-modoutput[1:47,]
modoutput$term<-gsub(".*b_","",modoutput$term)
#modoutput$term <- gsub(".*species", "", modoutput$term)
modoutput<-modoutput[!(modoutput$term=="sd_species__nao.z" | modoutput$term=="sd_species__mat.z" | modoutput$term=="sd_species__elev.z"
| modoutput$term=="sd_species__dist.z" | modoutput$term=="sd_species__space.z" | modoutput$term=="sd_species__cc.z" |
modoutput$term=="sigma"),]
modoutput$species <- ifelse(grepl("species",modoutput$term),gsub(".*species", "", modoutput$term), modoutput$term)
makeaeship <- c("nao.z", "mat.z", "dist.z", "elev.z", "space.z", "cc.z")
modoutput$species <- ifelse(modoutput$term%in%makeaeship, "AESHIP", modoutput$species)
modoutput$termclean <- gsub(":species.*", "", modoutput$term)
modoutput$estclean <- NA
modoutput$estclean <- ifelse(modoutput$termclean=="mat.z" & modoutput$species != "AESHIP",
modoutput$estimate[(modoutput$term=="mat.z")]+
modoutput$estimate, modoutput$estimate)
modoutput$estclean <- ifelse(modoutput$termclean=="nao.z" & modoutput$species != "AESHIP",
modoutput$estimate[(modoutput$term=="nao.z")]+
modoutput$estimate, modoutput$estclean)
modoutput$estclean <- ifelse(modoutput$termclean=="dist.z" & modoutput$species != "AESHIP",
modoutput$estimate[(modoutput$term=="dist.z")]+
modoutput$estimate, modoutput$estclean)
modoutput$estclean <- ifelse(modoutput$termclean=="elev.z" & modoutput$species != "AESHIP",
modoutput$estimate[(modoutput$term=="elev.z")]+
modoutput$estimate, modoutput$estclean)
modoutput$estclean <- ifelse(modoutput$termclean=="space.z" & modoutput$species != "AESHIP",
modoutput$estimate[(modoutput$term=="space.z")]+
modoutput$estimate, modoutput$estclean)
modoutput$estclean <- ifelse(modoutput$termclean=="cc.z" & modoutput$species != "AESHIP",
modoutput$estimate[(modoutput$term=="cc.z")]+
modoutput$estimate, modoutput$estclean)
modoutput$lowclean <- NA
modoutput$lowclean <- ifelse(modoutput$termclean=="mat.z" & modoutput$species != "AESHIP",
modoutput$'2%'[(modoutput$term=="mat.z")]+
modoutput$'2%', modoutput$'2%')
modoutput$lowclean <- ifelse(modoutput$termclean=="nao.z" & modoutput$species != "AESHIP",
modoutput$'2%'[(modoutput$term=="nao.z")]+
modoutput$'2%', modoutput$lowclean)
modoutput$lowclean <- ifelse(modoutput$termclean=="dist.z" & modoutput$species != "AESHIP",
modoutput$'2%'[(modoutput$term=="dist.z")]+
modoutput$'2%', modoutput$lowclean)
modoutput$lowclean <- ifelse(modoutput$termclean=="elev.z" & modoutput$species != "AESHIP",
modoutput$'2%'[(modoutput$term=="elev.z")]+
modoutput$'2%', modoutput$lowclean)
modoutput$lowclean <- ifelse(modoutput$termclean=="space.z" & modoutput$species != "AESHIP",
modoutput$'2%'[(modoutput$term=="space.z")]+
modoutput$'2%', modoutput$lowclean)
modoutput$lowclean <- ifelse(modoutput$termclean=="cc.z" & modoutput$species != "AESHIP",
modoutput$'2%'[(modoutput$term=="cc.z")]+
modoutput$'2%', modoutput$lowclean)
modoutput$highclean <- NA
modoutput$highclean <- ifelse(modoutput$termclean=="mat.z" & modoutput$species != "AESHIP",
modoutput$'98%'[(modoutput$term=="mat.z")]+
modoutput$'98%', modoutput$'98%')
modoutput$highclean <- ifelse(modoutput$termclean=="nao.z" & modoutput$species != "AESHIP",
modoutput$'98%'[(modoutput$term=="nao.z")]+
modoutput$'98%', modoutput$highclean)
modoutput$highclean <- ifelse(modoutput$termclean=="dist.z" & modoutput$species != "AESHIP",
modoutput$'98%'[(modoutput$term=="dist.z")]+
modoutput$'98%', modoutput$highclean)
modoutput$highclean <- ifelse(modoutput$termclean=="elev.z" & modoutput$species != "AESHIP",
modoutput$'98%'[(modoutput$term=="elev.z")]+
modoutput$'98%', modoutput$highclean)
modoutput$highclean <- ifelse(modoutput$termclean=="space.z" & modoutput$species != "AESHIP",
modoutput$'98%'[(modoutput$term=="space.z")]+
modoutput$'98%', modoutput$highclean)
modoutput$highclean <- ifelse(modoutput$termclean=="cc.z" & modoutput$species != "AESHIP",
modoutput$'98%'[(modoutput$term=="cc.z")]+
modoutput$'98%', modoutput$highclean)
modoutput$estavg <- ave(modoutput$estclean, modoutput$termclean)
modoutput$lowavg <- ave(modoutput$lowclean, modoutput$termclean)
modoutput$highavg <- ave(modoutput$highclean, modoutput$termclean)
modoutput$Jvar<-NA
modoutput$Jvar<-ifelse(modoutput$termclean=="nao.z", 8, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="mat.z", 11, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="elev.z", 9, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="dist.z", 10, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="space.z", 7, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="cc.z", 6, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="nao.z:cc.z", 2, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="mat.z:cc.z", 5, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="elev.z:cc.z", 3, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="dist.z:cc.z", 4, modoutput$Jvar)
modoutput$Jvar<-ifelse(modoutput$termclean=="space.z:cc.z", 1, modoutput$Jvar)
estimates<-c("Mean Spring Temperature", "Distance from Coast", "Elevation", "NAO Index", "Space Parameter", "Climate Change",
"Mean Spring Temperature \nx Climate Change", "Distance from Coast \nx Climate Change",
"Elevation x \nClimate Change", "NAO Index x \nClimate Change", "Space Parameter \nx Climate Change")
estimates<-rev(estimates)
modoutput <- modoutput[!is.na(modoutput$Jvar),]
allspp <- c("nao.z:cc.z", "mat.z:cc.z", "elev.z:cc.z", "dist.z:cc.z", "space.z:cc.z")
modoutput$species<-ifelse(modoutput$species%in%allspp, "all", modoutput$species)
indspp <- subset(modoutput, select=c("species", "lowclean", "highclean", "estclean", "Jvar", "termclean"))
indspp <- indspp[indspp$species!="all",]
indspp <- indspp[!duplicated(indspp),]
allspp <- subset(modoutput, select=c("species", "lowavg", "highavg", "estavg", "Jvar", "termclean"))
allspp <- allspp[(allspp$species=="all" | (allspp$species=="AESHIP")),]
allspp <- allspp[!duplicated(allspp),]
allspp$species <- "aaall"
names(allspp)<-c("species", "lowclean", "highclean", "estclean", "Jvar", "termclean")
modoutput <- full_join(indspp, allspp)
modoutput$Jvar <- ifelse(modoutput$species=="AESHIP", modoutput$Jvar - 0.2, modoutput$Jvar)
modoutput$Jvar <- ifelse(modoutput$species=="ALNGLU", modoutput$Jvar - 0.25, modoutput$Jvar)
modoutput$Jvar <- ifelse(modoutput$species=="BETPEN", modoutput$Jvar - 0.3, modoutput$Jvar)
modoutput$Jvar <- ifelse(modoutput$species=="FAGSYL", modoutput$Jvar - 0.35, modoutput$Jvar)
modoutput$Jvar <- ifelse(modoutput$species=="FRAEXC", modoutput$Jvar - 0.4, modoutput$Jvar)
modoutput$Jvar <- ifelse(modoutput$species=="QUEROB", modoutput$Jvar - 0.45, modoutput$Jvar)
modoutput$species<-ifelse(modoutput$species=="BETPEN", "aaBETPEN", modoutput$species)
modoutput$species<-ifelse(modoutput$species=="FRAEXC", "zFRAEXC", modoutput$species)
#write.csv(modoutput, file="~/Documents/git/regionalrisk/analyses/output/modoutput_90_origspp.csv", row.names=FALSE)
#write.csv(modoutput, file="~/Documents/git/regionalrisk/analyses/output/modoutput_90_dvrspp.csv", row.names=FALSE)
#write.csv(modoutput, file="~/Documents/git/regionalrisk/analyses/output/modoutput_90_fivespp.csv", row.names=FALSE)
###### VERY CLOSE! NEED TO MAKE MAIN DOTS BIGGER FOR ESTAVG AND THEN SMALLER DIFF COL DOTS FOR EACH SPECIES (ESTCLEAN)#####
my.pal <- colorRampPalette(brewer.pal(8,"Dark2"))(6)
my.pal <- c("black", my.pal)
regrisk<-ggplot(modoutput, aes(x=`2%`, xend=`98%`, y=Jvar, yend=Jvar)) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=estimate, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
guides(size=FALSE) +
scale_y_discrete(limits = sort(unique(modoutput$term)), labels=estimates) +
xlab("Change in Probability of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0,
plot.margin = unit(c(3,3,1,1), "lines")) +
coord_cartesian(xlim=c(-1.5, 1), ylim=c(1,11), clip = 'off') +
annotate("segment", x = 0.05, xend = 1.1, y = 11.75, yend = 11.75, colour = "black", size=0.2, arrow=arrow(length=unit(0.20,"cm"))) +
#annotate("segment", x = -0.1, xend = -1.6, y = 11.75, yend = 11.75, colour = "black", size=0.2, arrow=arrow(length=unit(0.20,"cm"))) + ## FOR FIVE
annotate("segment", x = -0.05, xend = -1.1, y = 11.75, yend = 11.75, colour = "black", size=0.2, arrow=arrow(length=unit(0.20,"cm"))) + ## for DVR and ORIG
#annotate("text", x = 0.6, y = 12, colour = "black", size=3, label="More False Spring Risk") + ## FOR FIVE
annotate("text", x = 0.55, y = 12, colour = "black", size=3, label="More False Spring Risk") + ## FOR DVR AND ORIG
#annotate("text", x = -0.8, y = 12, colour = "black", size=3, label="Less False Spring Risk") ## FOR FIVE
annotate("text", x = -0.55, y = 12, colour = "black", size=3, label="Less False Spring Risk")  ## FOR DVR AND ORIG
quartz()
regrisk
modoutput <- modoutput[(modoutput$species=="aaall"),]
regrisk<-ggplot(modoutput, aes(x=lowclean, xend=highclean, y=Jvar, yend=Jvar)) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=estclean, y=Jvar, col=species, size=species, alpha=species)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc")), aes(col=species, alpha=species)) +
guides(size=FALSE) +
scale_y_discrete(limits = sort(unique(modoutput$termclean)), labels=estimates) +
xlab("Change in Probability of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0,
plot.margin = unit(c(3,3,1,1), "lines")) +  #+ ggtitle("Original Parameters") +
coord_cartesian(xlim=c(-1, 1), ylim=c(1,11), clip = 'off') + #ggtitle("A.")
annotate("segment", x = 0.05, xend = 1.1, y = 11.75, yend = 11.75, colour = "black", size=0.2, arrow=arrow(length=unit(0.20,"cm"))) +
#annotate("segment", x = -0.1, xend = -1.6, y = 11.75, yend = 11.75, colour = "black", size=0.2, arrow=arrow(length=unit(0.20,"cm"))) + ## FOR FIVE
annotate("segment", x = -0.05, xend = -1.1, y = 11.75, yend = 11.75, colour = "black", size=0.2, arrow=arrow(length=unit(0.20,"cm"))) + ## for DVR and ORIG
#annotate("text", x = 0.6, y = 12, colour = "black", size=3, label="More False Spring Risk") + ## FOR FIVE
annotate("text", x = 0.55, y = 12, colour = "black", size=3, label="More False Spring Risk") + ## FOR DVR AND ORIG
#annotate("text", x = -0.8, y = 12, colour = "black", size=3, label="Less False Spring Risk") + ## FOR FIVE
annotate("text", x = -0.55, y = 12, colour = "black", size=3, label="Less False Spring Risk")  ## FOR DVR AND ORIG
regrisk
View(modoutput)
### Now to make the plots
modoutput <- modlongtemps98 #modelhere
View(modoutput)
fs <- read.csv("analyses/output/fs_newspace_longtemps.csv")
sort(unique(fs$species))
table(fs$fs, fs$species)
table(fs$fs)
five <- read.csv("analyses/output/fs_newspace_five.csv")
table(five$fs)
table(five$fs, five$species)
orig <- read.csv("analyses/output/fs_newspace_orig.csv")
