"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.5, 2.5), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.5, 2.5), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2,
labels=c("A","B"))
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme((legend.position = position), labels=c("A","B")))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme((legend.position="none"), labels=c("A","B")))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
labels = c("A", "B"),
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
install.packages("cowplot")
library(cowplot)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs")  +
guides(size=FALSE)
plot2 <- eur.map
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
legend <- get_legend(eur.map)
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.3, 2.3, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B", ""))
grid.arrange(am.map, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(arm)
library(data.table)
library(lme4)
setwd("~/Documents/git/regionalrisk/analyses/output")
bb<-read.csv("bbch_region_betula.csv", header=TRUE)
ace<-read.csv("bbch_region.csv", header=TRUE)
fagus<-read.csv("bbch_region_fagus.csv", header=TRUE)
tilia<-read.csv("bbch_region_tilia.csv", header=TRUE)
aesc<-read.csv("bbch_region_aesculus.csv", header=TRUE)
alnus<-read.csv("bbch_region_alnus.csv", header=TRUE)
betpub<-read.csv("bbch_region_betpub.csv", header=TRUE)
cornus<-read.csv("bbch_region_cornus.csv", header=TRUE)
frax<-read.csv("bbch_region_fraxinus.csv", header=TRUE)
larix<-read.csv("bbch_region_larix.csv", header=TRUE)
populus<-read.csv("bbch_region_populus.csv", header=TRUE)
quercus<-read.csv("bbch_region_quercus.csv", header=TRUE)
robinia<-read.csv("bbch_region_robinia.csv", header=TRUE)
sambucus<-read.csv("bbch_region_sambucus.csv", header=TRUE)
tilpla<-read.csv("bbch_region_tilpla.csv", header=TRUE)
bb<-full_join(bb,ace)
bb<-full_join(bb,fagus)
bb<-full_join(bb,tilia)
bb<-full_join(bb,aesc)
bb<-full_join(bb,alnus)
bb<-full_join(bb,betpub)
bb<-full_join(bb,cornus)
bb<-full_join(bb,frax)
bb<-full_join(bb,larix)
bb<-full_join(bb,populus)
bb<-full_join(bb,quercus)
bb<-full_join(bb,robinia)
bb<-full_join(bb,sambucus)
bb<-full_join(bb,tilpla)
eur.tempmn <- nc_open(file.path("~/Documents/git/regionalrisk/analyses/input/tn_0.25deg_reg_v15.0.nc"))
library(ncdf4)
library(Interpol.T)
library(chillR)
eur.tempmn <- nc_open(file.path("~/Documents/git/regionalrisk/analyses/input/tn_0.25deg_reg_v15.0.nc"))
all<-bb%>%filter(YEAR>=1950)
x<-paste(all$YEAR, all$DAY)
all$date<-as.Date(strptime(x, format="%Y %j"))
tempval <- list()
for(i in 1:nrow(all)){ # i = 1
# find this location
lo <- all[i,"LON"]
la <- all[i,"LAT"]
ndiff.long.cell <- abs(eur.tempmn$dim$longitude$vals-as.numeric(lo))
ndiff.lat.cell <- abs(eur.tempmn$dim$latitude$vals-as.numeric(la))
nlong.cell <- which(ndiff.long.cell==min(ndiff.long.cell))[1]
nlat.cell <- which(ndiff.lat.cell==min(ndiff.lat.cell))[1]
yr <- as.numeric(all[i,"YEAR"])#
# start and end days of the climate data we need for the lat/long
stday <- strptime(paste(yr, "01-02", sep="-"),"%Y-%m-%d", tz="GMT")#start day
# using fieldsample.date2, which is the same as fieldsampledate, but formatted as  "%Y-%m-%d"
#field sample date2 is the end day for chilling calculations
endday <- strptime(all[i,"date"],"%Y-%m-%d", tz = "GMT")
st <- as.numeric(as.character(stday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
en <- as.numeric(as.character(endday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
if(en<st){en=st}
if(endday<stday){endday=stday}
# get temperature values for this date range.
# check the dim of the netcdf file, str(netcdf), and see what the order of the different dimensions are. In this case, it goes long, lat, time. So when we are moving through the file, we give it the long and lat and date of start, then move through the files by going 'up' the cube of data to the end date
mins <- ncvar_get(eur.tempmn, 'tn',
start=c(nlong.cell,nlat.cell,st),
count=c(1, 1,en-st+1) )# this is where we move through the 'cube' to get the one vector of Temp mins
tempval[[as.character(all[i,"date"])]] <- data.frame(Lat = la,Long = lo, Date = seq(stday, endday, by="day"),
Tmin = mins)
}
