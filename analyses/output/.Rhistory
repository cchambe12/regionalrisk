simple$Jvar<-ifelse(simple$var=="m.index", 9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:speciesALNGLU", 8.9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:speciesBETPEN", 8.8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:speciesFAGSYL", 8.7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:speciesFRAEXC", 8.6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:speciesQUEROB", 8.5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sp.temp", 8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesALNGLU:sp.temp", 7.9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesBETPEN:sp.temp", 7.8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFAGSYL:sp.temp", 7.7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFRAEXC:sp.temp", 7.6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesQUEROB:sp.temp", 7.5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sm.elev", 7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesALNGLU:sm.elev", 6.9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesBETPEN:sm.elev", 6.8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFAGSYL:sm.elev", 6.7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFRAEXC:sm.elev", 6.6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesQUEROB:sm.elev", 6.5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="space", 6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesALNGLU:space", 5.9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesBETPEN:space", 5.8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFAGSYL:space", 5.7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFRAEXC:space", 5.6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesQUEROB:space", 5.5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="cc", 5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesALNGLU:cc", 4.9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesBETPEN:cc", 4.8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFAGSYL:cc", 4.7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesFRAEXC:cc", 4.6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="speciesQUEROB:cc", 4.5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:cc", 4, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sp.temp:cc", 3, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sm.elev:cc", 2, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="space:cc", 1, simple$Jvar)
cols <- colorRampPalette(brewer.pal(7,"Accent"))(7)
estimates<-c("NAO Index", "Mean Spring Temperature", "Elevation", "Space Parameter", "Species",
"NAO Index x \nClimate Change", "Mean Spring Temperature \nx Climate Change",
"Elevation x \nClimate Chnage", "Space Parameter \nx Climate Change")
estimates<-rev(estimates)
post.inter
load("~/Documents/git/regionalrisk/analyses/output/brm_slopes_fast.Rdata")
library(rstan)
library(rstanarm)
library(sjPlot)
library(sjmisc)
library(RColorBrewer)
library(dplyr)
library(broom)
brms<-as.data.frame(tidy(slopes.fast,robust = TRUE))
View(brms)
load("~/Documents/git/regionalrisk/analyses/scripts/brm_slopes_fast.Rdata")
brms<-as.data.frame(tidy(slopes.fast,robust = TRUE))
View(brms)
brms<-brms[2:46,]
brms$term<-gsub("b_.*","",term$var)
brms$term<-gsub("r_species.*","",term$var)
brms$term<-gsub("b_.*","",brms$term)
brms$term<-gsub("r_species.*","",brms$term)
brms<-as.data.frame(tidy(slopes.fast,robust = TRUE))
brms<-brms[2:46,]
brms$term<-gsub(".*b_","",brms$term)
brms$term<-gsub(".*r_species","",brms$term)
brms<-brms[!(11:16),]
brms<-as.data.frame(tidy(slopes.fast,robust = TRUE))
brms<-brms[2:46,]
brms$term<-gsub(".*b_","",brms$term)
brms$term<-gsub(".*r_species","",brms$term)
brms<-brms[!11:16,]
brms<-as.data.frame(tidy(slopes.fast,robust = TRUE))
brms<-brms[2:46,]
brms$term<-gsub(".*b_","",brms$term)
brms$term<-gsub(".*r_species","",brms$term)
brms<-brms[!(brms$term=="sd_species_m.index" |brms$term=="sd_species_sp.temp") | brms$term=="sd_species_sm.elev"
| brms$term=="sd_species_space" | brms$term=="sd_species_cc"),]
brms<-brms[!(brms$term=="sd_species_m.index" | brms$term=="sd_species_sp.temp" | brms$term=="sd_species_sm.elev"
| brms$term=="sd_species_space" | brms$term=="sd_species_cc"),]
brms<-brms[!(brms$term=="sd_species__m.index" | brms$term=="sd_species__sp.temp" | brms$term=="sd__species_sm.elev"
| brms$term=="sd_species__space" | brms$term=="sd_species__cc" | brms$term=="sigma"),]
brms<-brms[!(brms$term=="sd_species__m.index" | brms$term=="sd_species__sp.temp" | brms$term=="sd__species__sm.elev"
| brms$term=="sd_species__space" | brms$term=="sd_species__cc" | brms$term=="sigma"),]
brms<-brms[!(brms$term=="sd_species__m.index" | brms$term=="sd_species__sp.temp" | brms$term=="sd_species__sm.elev"
| brms$term=="sd_species__space" | brms$term=="sd_species__cc" | brms$term=="sigma"),]
brms$species<-c(0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,0,0,0)
brms$species<-c(0,0,0,0,0,0,0,0,0, 1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
brms$Jvar<-NA
brms$Jvar<-ifelse(brms$term=="m.index", 9, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[AESHIP,m.index]", 8.9, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[ALNGLU,m.index]", 8.8, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[BETPEN,m.index]", 8.7, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FAGSYL,m.index]", 8.6, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FRAEXC,m.index]", 8.5, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[QUEROB,m.index]", 8.4, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="sp.temp", 8, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[AESHIP,sp.temp]", 7.9, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[ALNGLU,sp.temp]", 7.8, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[BETPEN,sp.temp]", 7.7, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FAGSYL,sp.temp]", 7.6, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FRAEXC,sp.temp]", 7.5, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[QUEROB,sp.temp]", 7.4, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="sm.elev", 7, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[AESHIP,sm.elev]", 6.9, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[ALNGLU,sm.elev]", 6.8, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[BETPEN,sm.elev]", 6.7, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FAGSYL,sm.elev]", 6.6, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FRAEXC,sm.elev]", 6.5, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[QUEROB,sm.elev]", 6.4, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="space", 6, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[AESHIP,space]", 5.9, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[ALNGLU,space]", 5.8, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[BETPEN,space]", 5.7, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FAGSYL,space]", 5.6, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FRAEXC,space]", 5.5, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[QUEROB,space]", 5.4, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="cc", 5, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[AESHIP,cc]", 4.9, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[ALNGLU,cc]", 4.8, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[BETPEN,cc]", 4.7, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FAGSYL,cc]", 4.6, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[FRAEXC,cc]", 4.5, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="[QUEROB,cc]", 4.4, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="m.index:cc", 4, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="sp.temp:cc", 3, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="cc:sm.elev", 2, brms$Jvar)
brms$Jvar<-ifelse(brms$term=="cc:space", 1, brms$Jvar)
cols <- colorRampPalette(brewer.pal(9,"Set1"))(7)
estimates<-c("NAO Index", "Mean Spring Temperature", "Elevation", "Space Parameter", "Climate Change",
"NAO Index x \nClimate Change", "Mean Spring Temperature \nx Climate Change",
"Elevation x \nClimate Chnage", "Space Parameter \nx Climate Change")
estimates<-rev(estimates)
regrisk<-ggplot(brms, aes(x=lower, xend=upper, y=Jvar, yend=Jvar, col=as.factor(species))) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=estimate, y=Jvar, col=as.factor(species), size=as.factor(species))) +
scale_colour_manual(name="Species", values=cols,
labels=c("1"=expression(paste(italic("Aesculus hippocastanum"))),
"2"=expression(paste(italic("Alnus glutinosa"))),
"3"=expression(paste(italic("Betula lenta"))),
"4"=expression(paste(italic("Fagus sylvatica"))),
"5"=expression(paste(italic("Fraxinus excelsior"))),
"6"=expression(paste(italic("Quercus robur"))),
"0"="Overall Effects"))+
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(brms$term)), labels=estimates) +
xlab("Change in Number of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=5), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = c(0.85,0.25),
legend.text.align = 0) + #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
scale_size_manual(values=c(3, 1, 1, 1, 1, 1, 1, 1, 1, 1), name="Species",
labels=c("1"=expression(paste(italic("Aesculus hippocastanum"))),
"2"=expression(paste(italic("Alnus glutinosa"))),
"3"=expression(paste(italic("Betula lenta"))),
"4"=expression(paste(italic("Fagus sylvatica"))),
"5"=expression(paste(italic("Fraxinus excelsior"))),
"6"=expression(paste(italic("Quercus robur"))),
"0"="Overall Effects"))
quartz()
regrisk
brms<-as.data.frame(tidy(slopes.fast,robust = TRUE))
load("~/Documents/git/regionalrisk/analyses/scripts/brm_biglm.Rdata")
brm.biglm
rm(list=ls())
options(stringsAsFactors = FALSE)
## Libraries
library(rstan)
library(rstanarm)
library(sjPlot)
library(sjmisc)
library(RColorBrewer)
library(dplyr)
library(broom)
library(ggplot2)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/analyses/output")
bb<-read.csv("regrisk.cleaned.2.csv", header=TRUE)
bb$sm.elev<-bb$elev/100
bb<-na.omit(bb)
#write.csv(bb, file="~/Documents/git/regionalrisk/analyses/output/bb.brm2.csv", row.names = FALSE)
#bb$species<-as.numeric(as.factor(bb$species))
### Lines 27-67 are following Ben's example on the stan_biglm documentation
### Going to make Fagus sylvatica the baseline because it is the most phenologically in the middle
# Avg budburst overall for the entire dataset is 104.8766 and Fagus is 106.7, Betula (the next closest) is 99.24
bb$species<-ifelse(bb$species=="FAGSYL", "aaFAGSYL", bb$species)
unique(bb$species)
is.na(bb)
x<-bb[is.na(bb)]
fit<-lm(fs.count~ m.index + sp.temp + sm.elev  +
space + cc + species + m.index:species +
sp.temp:species + sm.elev:species + space:species + cc:species +
m.index:cc + sp.temp:cc + sm.elev:cc +
space:cc, data=bb)             # not necessary in this case
b <- coef(fit)[-1]
R <- qr.R(fit$qr)[-1,-1]
SSR <- crossprod(fit$residuals)[1]
not_NA <- !is.na(fitted(fit))
N <- sum(not_NA)
xbar <- c(as.numeric(mean(bb$m.index)),  as.numeric(mean(bb$m.index[bb$species=="AESHIP"])), as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])), as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FAGSYL"])), as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])),
as.numeric(mean(bb$sm.elev)),
as.numeric(mean(bb$sm.elev[bb$species=="AESHIP"])),
as.numeric(mean(bb$sm.elev[bb$species=="ALNGLU"])), as.numeric(mean(bb$sm.elev[bb$species=="BETPEN"])),
as.numeric(mean(bb$sm.elev[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sm.elev[bb$species=="QUEROB"])),
as.numeric(mean(bb$space)),
as.numeric(mean(bb$space[bb$species=="AESHIP"])),
as.numeric(mean(bb$space[bb$species=="ALNGLU"])), as.numeric(mean(bb$space[bb$species=="BETPEN"])),
as.numeric(mean(bb$space[bb$species=="FRAEXC"])),
as.numeric(mean(bb$space[bb$species=="QUEROB"])),
as.numeric(mean(bb$cc)),
as.numeric(mean(bb$cc[bb$species=="AESHIP"])),
as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(as.factor("AESHIP")), as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)))
xbarnames<-colnames(R)
names(xbar)<-xbarnames
y <- bb$fs.count[not_NA]
ybar <- mean(y)
s_y <- sd(y)
post.inter <- stan_biglm.fit(b, R, SSR, N, xbar, ybar, s_y, prior = R2(.75),
# the next line is only to make the example go fast
chains = 4, iter = 2000)
xbar
bb$species<-ifelse(bb$species=="FAGSYL", "aaFAGSYL", bb$species)
fit<-lm(fs.count~m.index + m.index:species + sp.temp + sp.temp:species + sm.elev + sm.elev:species +
space + space:species + cc  + cc:species + species + m.index:cc + sp.temp:cc +sm.elev:cc +
space:cc, data=bb)             # not necessary in this case
b <- coef(fit)
R <- qr.R(fit$qr)
SSR <- crossprod(fit$residuals)[1]
not_NA <- !is.na(fitted(fit))
N <- sum(not_NA)
xbar <- c(as.numeric(mean(bb$m.index)),  as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$sm.elev)), as.numeric(mean(bb$space)),
as.numeric(mean(bb$cc)),
as.numeric(as.factor("AESHIP")),
as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FAGSYL")), as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FAGSYL"])), as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])),
as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FAGSYL"])), as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])),
as.numeric(mean(bb$sm.elev[bb$species=="ALNGLU"])), as.numeric(mean(bb$sm.elev[bb$species=="BETPEN"])),
as.numeric(mean(bb$sm.elev[bb$species=="FAGSYL"])), as.numeric(mean(bb$sm.elev[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sm.elev[bb$species=="QUEROB"])),
as.numeric(mean(bb$space[bb$species=="ALNGLU"])), as.numeric(mean(bb$space[bb$species=="BETPEN"])),
as.numeric(mean(bb$space[bb$species=="FAGSYL"])), as.numeric(mean(bb$space[bb$species=="FRAEXC"])),
as.numeric(mean(bb$space[bb$species=="QUEROB"])),
as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])), as.numeric(mean(bb$cc[bb$species=="FAGSYL"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)))
xbar <- c(as.numeric(mean(bb$m.index)),  as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$sm.elev)), as.numeric(mean(bb$space)),
as.numeric(mean(bb$cc)),
as.numeric(as.factor("AESHIP")),
as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FAGSYL")), as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$m.index[bb$species=="AESHIP"])),
as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])),
as.numeric(mean(bb$sp.temp[bb$species=="AESHIP"])),
as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])),
as.numeric(mean(bb$sm.elev[bb$species=="AESHIP"])),
as.numeric(mean(bb$sm.elev[bb$species=="ALNGLU"])), as.numeric(mean(bb$sm.elev[bb$species=="BETPEN"])),
as.numeric(mean(bb$sm.elev[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sm.elev[bb$species=="QUEROB"])),
as.numeric(mean(bb$space[bb$species=="AESHIP"])),
as.numeric(mean(bb$space[bb$species=="ALNGLU"])), as.numeric(mean(bb$space[bb$species=="BETPEN"])),
as.numeric(mean(bb$space[bb$species=="FRAEXC"])),
as.numeric(mean(bb$space[bb$species=="QUEROB"])),
as.numeric(mean(bb$cc[bb$species=="AESHIP"])),
as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)))
xbarnames<-colnames(R)
names(xbar)<-xbarnames
y <- bb$fs.count[not_NA]
ybar <- mean(y)
s_y <- sd(y)
post.inter <- stan_biglm.fit(b, R, SSR, N, xbar, ybar, s_y, prior = R2(.75),
# the next line is only to make the example go fast
chains = 4, iter = 2000)
##### Ugly but workable code for plotting ####
plotting <- as.data.frame(summary(post.inter)$summary)
simple<-plotting
simple$var<- rownames(simple)
rownames(simple)<-1:45
rownames(simple)<-1:46
View(simple)
b <- coef(fit)[-1]
R <- qr.R(fit$qr)[-1,-1]
SSR <- crossprod(fit$residuals)[1]
not_NA <- !is.na(fitted(fit))
N <- sum(not_NA)
xbar <- c(as.numeric(mean(bb$m.index)),  as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$sm.elev)), as.numeric(mean(bb$space)),
as.numeric(mean(bb$cc)),
as.numeric(as.factor("AESHIP")),
as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FAGSYL")), as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$m.index[bb$species=="AESHIP"])),
as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])),
as.numeric(mean(bb$sp.temp[bb$species=="AESHIP"])),
as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])),
as.numeric(mean(bb$sm.elev[bb$species=="AESHIP"])),
as.numeric(mean(bb$sm.elev[bb$species=="ALNGLU"])), as.numeric(mean(bb$sm.elev[bb$species=="BETPEN"])),
as.numeric(mean(bb$sm.elev[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sm.elev[bb$species=="QUEROB"])),
as.numeric(mean(bb$space[bb$species=="AESHIP"])),
as.numeric(mean(bb$space[bb$species=="ALNGLU"])), as.numeric(mean(bb$space[bb$species=="BETPEN"])),
as.numeric(mean(bb$space[bb$species=="FRAEXC"])),
as.numeric(mean(bb$space[bb$species=="QUEROB"])),
as.numeric(mean(bb$cc[bb$species=="AESHIP"])),
as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)))
xbarnames<-colnames(R)
names(xbar)<-xbarnames
y <- bb$fs.count[not_NA]
ybar <- mean(y)
s_y <- sd(y)
post.inter <- stan_biglm.fit(b, R, SSR, N, xbar, ybar, s_y, prior = R2(.75),
# the next line is only to make the example go fast
chains = 4, iter = 2000)
xbar <- c(as.numeric(mean(bb$m.index)),  as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$sm.elev)), as.numeric(mean(bb$space)),
as.numeric(mean(bb$cc)),
as.numeric(as.factor("AESHIP")),
as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$m.index[bb$species=="AESHIP"])),
as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])),
as.numeric(mean(bb$sp.temp[bb$species=="AESHIP"])),
as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])),
as.numeric(mean(bb$sm.elev[bb$species=="AESHIP"])),
as.numeric(mean(bb$sm.elev[bb$species=="ALNGLU"])), as.numeric(mean(bb$sm.elev[bb$species=="BETPEN"])),
as.numeric(mean(bb$sm.elev[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sm.elev[bb$species=="QUEROB"])),
as.numeric(mean(bb$space[bb$species=="AESHIP"])),
as.numeric(mean(bb$space[bb$species=="ALNGLU"])), as.numeric(mean(bb$space[bb$species=="BETPEN"])),
as.numeric(mean(bb$space[bb$species=="FRAEXC"])),
as.numeric(mean(bb$space[bb$species=="QUEROB"])),
as.numeric(mean(bb$cc[bb$species=="AESHIP"])),
as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)))
xbarnames<-colnames(R)
names(xbar)<-xbarnames
y <- bb$fs.count[not_NA]
ybar <- mean(y)
s_y <- sd(y)
post.inter <- stan_biglm.fit(b, R, SSR, N, xbar, ybar, s_y, prior = R2(.75),
# the next line is only to make the example go fast
chains = 4, iter = 2000)
##### Ugly but workable code for plotting ####
plotting <- as.data.frame(summary(post.inter)$summary)
simple<-plotting
simple$var<- rownames(simple)
rownames(simple)<-1:45
simple<-simple[2:40,]
#simple<-simple[!(simple$var=="speciesALNGLU"|simple$var=="speciesBETPEN"|simple$var=="speciesFAGSYL"|
#simple$var=="speciesFRAEXC"|simple$var=="speciesQUEROB"),]
simple<-subset(simple, select=c("var", "mean", "2.5%", "97.5%"))
simple$Jvar<-NA
#simple$Jvar<-ifelse(simple$var=="(Intercept)", 10, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index", 9, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sp.temp", 8, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sm.elev", 7, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="space", 6, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="cc", 5, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="m.index:cc", 4, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sp.temp:cc", 3, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="sm.elev:cc", 2, simple$Jvar)
simple$Jvar<-ifelse(simple$var=="space:cc", 1, simple$Jvar)
cols <- colorRampPalette(brewer.pal(9,"Set1"))(7)
estimates<-c("NAO Index", "Mean Spring Temperature", "Elevation", "Space Parameter", "Climate Change",
"NAO Index x \nClimate Change", "Mean Spring Temperature \nx Climate Change",
"Elevation x \nClimate Chnage", "Space Parameter \nx Climate Change")
estimates<-rev(estimates)
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar, col="darkblue")) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = c(0.8,0.25),
legend.text.align = 0) + #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
quartz()
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar, col="darkblue")) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = c(0.8,0.25),
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
quartz()
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar), col="darkblue", size=3) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar), col="navyblue", size=3) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar), col="blue3", size=3) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar), col="blue2", size=3) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar)) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar)) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar), col="blue3", size=3) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar)) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar), col="blue3", size=2) +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar)) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar), col="blue3") +
geom_segment(arrow = arrow(length = unit(0.00, "npc"))) +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
regrisk<-ggplot(simple, aes(x=`2.5%`, xend=`97.5%`, y=Jvar, yend=Jvar)) +
geom_vline(xintercept=0, linetype="dotted") + geom_point(aes(x=mean, y=Jvar), col="blue3") +
geom_segment(arrow = arrow(length = unit(0.00, "npc")), col="blue3") +
scale_y_discrete(limits = sort(unique(simple$var)), labels=estimates) +
xlab("Model Estimate Change in \nNumber of False Springs") + ylab("") + theme_linedraw() +
theme(legend.text=element_text(size=7), legend.title = element_text(size=9), legend.background = element_rect(linetype="solid", color="grey", size=0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans"), legend.position = "none",
legend.text.align = 0)  #+ coord_cartesian(ylim=c(1,5), xlim=c(-20, 10))
regrisk
