filter(date==max(date))
tt<-tt[!duplicated(tt), ]
tt<-within(tt, count[tt$count==2]<-"end")
dat <- merge(plz, tt, by = "pepBB", all.x = TRUE)
dat$count.x[which(dat$count.x==2 & dat$count.y=="end")]<-"end"
dat$count.x[which(dat$count.x=="start" & dat$count.y=="end")]<-"start"
dat.clean<-dat%>%
dplyr::select(pepBB, year.x, Tmin.x, lat.x, long.x, date.x, PEP_ID.x, BBCH.x, DAY.x, species.x, count.x, frz.x, pepyear.x)%>%
rename(year=year.x)%>%
rename(Tmin=Tmin.x)%>%
rename(lat=lat.x)%>%
rename(long=long.x)%>%
rename(date=date.x)%>%
rename(PEP_ID=PEP_ID.x)%>%
rename(BBCH=BBCH.x)%>%
rename(DAY=DAY.x)%>%
rename(species=species.x)%>%
rename(count=count.x)%>%
rename(frz=frz.x)%>%
rename(pepyear=pepyear.x)
plz<-dat.clean
#############################################################
#plz$count<-ifelse(plz$count==2, "end", plz$count)
#plz$count<-ifelse(plz$count==3, NA, plz$count)
#plz<-na.omit(plz)
#plz$pepyear<-paste(plz$PEP_ID, plz$year, sep=",")
#ends<- unique(plz$pepyear[which(plz$count=="end")])
#plz<-filter(plz, pepyear %in% ends)
plz$start<-ifelse(plz$count=="start", plz$date, NA)
class(plz$start)<-"Date"
plz$end<-ifelse(plz$count=="end", plz$date, NA)
class(plz$end)<-"Date"
plzers<-plz%>%dplyr::select(year, PEP_ID, start, end, lat, long, pepyear)
plzers<-setDT(plzers)[, lapply(.SD, na.omit), by = pepyear]
#plzers<-plzers[!(plzers$start==plzers$end),]
#plzers<-plzers[!duplicated(plzers), ]
plzers<-plzers[!(is.na(plzers$PEP_ID))]
plzers$end<-ifelse(is.na(plzers$end), plzers$start, plzers$end)
class(plzers$end)<-"Date"
please<-plzers %>%
arrange(PEP_ID)%>%
rowwise()%>%
do(data.frame(PEP_ID=.$PEP_ID, year=.$year, pepyear=.$pepyear, lat= .$lat, long=.$long, date = seq.Date(.$start, .$end, by=1)))
freeze<-left_join(please,clim)
freeze<-freeze[!(is.na(freeze$Tmin)),]
freeze$frz<-ifelse(freeze$Tmin<=-2.2, 1, 0)
freeze$count <- ave(
freeze$frz, freeze$PEP_ID, freeze$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
## Any relationship between growing season and region?
peppies<-as.data.frame(table(freeze$pepyear))
peppies<-peppies%>%
rename(pepyear=Var1)%>%
rename(growth=Freq)
freeze<-full_join(freeze, peppies)
dxx<-freeze%>%group_by(PEP_ID, year, lat, long, growth)%>%summarise(frz=max(count))
dxx$fs<-ifelse(dxx$frz>=1, 1, 0)
total<-tally(group_by(dxx,PEP_ID))
total<-rename(total, total=n)
dxx<-full_join(dxx, total)
fs<-dxx%>%dplyr::select(-total)
fs$fs<-ifelse(dxx$fs>=1, 1, NA)
fs<-na.omit(fs)
fs<-tally(group_by(fs,PEP_ID))
fs<-rename(fs, events=n)
dxx<-full_join(dxx, fs)
dxx$events<-ifelse(is.na(dxx$events), 0, dxx$events)
dxx$freq<-dxx$events/dxx$total
model1<-lm(freq~lat*long, data=dxx)
display(model1)
mod<-lm(events~lat*long, data=dxx)
display(mod)
write.csv(dxx, "~/Documents/git/regionalrisk/analyses/output/betula_events.csv", row.names=FALSE)
setwd("~/Documents/git/regionalrisk/analyses")
land<-readShapeSpatial("input/natural_earth_vector/50m_physical/ne_50m_land.shp") ##
boundars<-readShapeSpatial("input/natural_earth_vector/50m_cultural/ne_50m_admin_0_countries.shp")
betula<-read.csv("output/betula_events.csv", header=TRUE)
fagus<-read.csv("output/fagus_events.csv", header=TRUE)
acer<-read.csv("output/acer_events.csv")
bet.clim<-read.csv("output/climate_master.csv", header=TRUE)
bet.bb<-read.csv("output/bbch_region_betula.csv", header=TRUE)
plot(land,col="grey",lty=0,ylim=c(30,60),xlim=c(-5,35))
## or:
plot(boundars,col="grey",border="lightgrey",ylim=c(30,70),xlim=c(-5,35))
colors<-colorRampPalette(c("red", "blue"))
betula$events<-as.numeric(as.character(betula$events))
betula$freq<-as.numeric(as.character(betula$freq))
betula$Col <- colors(10)[as.numeric(cut(betula$freq,breaks = 0.1))]
points(betula$long, betula$lat, cex = .6)
View(dxx)
points(betula$long, betula$lat, col=colors(10), cex = .6)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(arm)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/data/tilia")
austria<-read.csv("PEP725_AT/PEP725_AT_Tilia.csv", header=TRUE)
aust.station<-read.csv("PEP725_AT/PEP725_AT_stations.csv", header=TRUE)
bos<-read.csv("PEP725_BA/PEP725_BA_Tilia.csv", header=TRUE)
bos.station<-read.csv("PEP725_BA/PEP725_BA_stations.csv", header=TRUE)
switz<-read.csv("PEP725_CH/PEP725_CH_Tilia.csv", header=TRUE)
switz.station<-read.csv("PEP725_CH/PEP725_CH_stations.csv", header=TRUE)
czech<-read.csv("PEP725_CZ/PEP725_CZ_Tilia.csv", header=TRUE)
czech.station<-read.csv("PEP725_CZ/PEP725_CZ_stations.csv", header=TRUE)
croatia<-read.csv("PEP725_HR/PEP725_HR_Tilia.csv", header=TRUE)
croa.station<-read.csv("PEP725_HR/PEP725_HR_stations.csv", header=TRUE)
germany<-read.csv("PEP725_DE/PEP725_DE_Tilia.csv", header=TRUE)
germ.station<-read.csv("PEP725_DE/PEP725_DE_stations.csv", header=TRUE)
spain<-read.csv("PEP725_ES/PEP725_ES_Tilia.csv", header=TRUE)
spain.station<-read.csv("PEP725_ES/PEP725_ES_stations.csv", header=TRUE)
ireland<-read.csv("PEP725_IE/PEP725_IE_Tilia.csv", header=TRUE)
ire.station<-read.csv("PEP725_IE/PEP725_IE_stations.csv", header=TRUE)
german2<-read.csv("PEP725_IP/PEP725_IP_Tilia.csv", header=TRUE)
german2.station<-read.csv("PEP725_IP/PEP725_IP_stations.csv", header=TRUE)
lat<-read.csv("PEP725_LT/PEP725_LT_Tilia.csv", header=TRUE) #Actually Lithuania
lat.station<-read.csv("PEP725_LT/PEP725_LT_stations.csv", header=TRUE)
mont<-read.csv("PEP725_ME/PEP725_ME_Tilia.csv", header=TRUE)
mont.station<-read.csv("PEP725_ME/PEP725_ME_stations.csv", header=TRUE)
neth<-read.csv("PEP725_NL/PEP725_NL_Tilia.csv", header=TRUE)
neth.station<-read.csv("PEP725_NL/PEP725_NL_stations.csv", header=TRUE)
pol<-read.csv("PEP725_PL/PEP725_PL_Tilia.csv", header=TRUE)
pol.station<-read.csv("PEP725_PL/PEP725_PL_stations.csv", header=TRUE)
slov<-read.csv("PEP725_SI/PEP725_SI_Tilia.csv", header=TRUE)
slov.station<-read.csv("PEP725_SI/PEP725_SI_stations.csv", header=TRUE)
vakia<-read.csv("PEP725_SK/PEP725_SK_Tilia.csv", header=TRUE) # ADDED!
vakia.station<-read.csv("PEP725_SK/PEP725_SK_stations.csv", header=TRUE) #ADDED!
at<-austria%>%filter(BBCH<=19)
at<-full_join(at, aust.station)
at<-dplyr::select(at, -NAME)
at<-na.omit(at)
bs<-bos%>%filter(BBCH<=19)
bs<-full_join(bs, bos.station)
bs<-dplyr::select(bs, -NAME)
bs<-na.omit(bs)
d<-bind_rows(at,bs)
ch<-switz%>%filter(BBCH<=19)
ch<-full_join(ch, switz.station)
ch<-dplyr::select(ch, -NAME)
ch<-na.omit(ch)
d<-bind_rows(d,ch)
cz<-czech%>%filter(BBCH<=19)
cz<-full_join(cz, czech.station)
cz<-dplyr::select(cz, -NAME)
cz<-na.omit(cz)
d<-bind_rows(d, cz)
es<-spain%>%filter(BBCH<=19)
es<-full_join(es, spain.station)
es<-dplyr::select(es, -NAME)
es<-na.omit(es)
d<-bind_rows(d, es)
gm<-germany%>%filter(BBCH<=19)
gm<-full_join(gm, germ.station)
gm<-dplyr::select(gm, -NAME)
gm<-na.omit(gm)
d<-bind_rows(d, gm)
hr<-croatia%>%filter(BBCH<=19)
hr<-full_join(hr, croa.station)
hr<-dplyr::select(hr, -NAME)
hr<-na.omit(hr)
d<-bind_rows(d, hr)
ie<-ireland%>%filter(BBCH<=19)
ie<-full_join(ie, ire.station)
ie<-dplyr::select(ie, -NAME)
ie<-na.omit(ie)
d<-bind_rows(d, ie)
ip<-german2%>%filter(BBCH<=19)
ip<-full_join(ip, german2.station)
ip<-dplyr::select(ip, -NAME)
ip<-na.omit(ip)
d<-bind_rows(d, ip)
la<-lat%>%filter(BBCH<=19)
la<-full_join(la, lat.station)
la<-dplyr::select(la, -NAME)
la<-na.omit(la)
d<-bind_rows(d, la)
me<-mont%>%filter(BBCH<=19)
me<-full_join(me, mont.station)
me<-dplyr::select(me, -NAME)
me<-na.omit(me)
d<-bind_rows(d, me)
pl<-pol%>%filter(BBCH<=19)
pl<-full_join(pl, pol.station)
pl<-dplyr::select(pl, -NAME)
pl<-na.omit(pl)
d<-bind_rows(d, pl)
nl<-neth%>%filter(BBCH<=19)
nl<-full_join(nl, neth.station)
nl<-dplyr::select(nl, -NAME)
nl<-na.omit(nl)
d<-bind_rows(d, nl)
si<-slov%>%filter(BBCH<=19)
si<-full_join(si, slov.station)
si<-dplyr::select(si, -NAME)
si<-na.omit(si)
d<-bind_rows(d, si)
sk<-vakia%>%filter(BBCH<=19)
sk<-full_join(sk, vakia.station)
sk<-dplyr::select(sk, -NAME)
sk<-na.omit(sk)
d<-bind_rows(d, sk)
#d<-na.omit(d)
d$species<-"TILCOR"
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(arm)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/data/tilia")
austria<-read.csv("PEP725_AT/PEP725_AT_Tilia.csv", header=TRUE)
aust.station<-read.csv("PEP725_AT/PEP725_AT_stations.csv", header=TRUE)
bos<-read.csv("PEP725_BA/PEP725_BA_Tilia.csv", header=TRUE)
bos.station<-read.csv("PEP725_BA/PEP725_BA_stations.csv", header=TRUE)
switz<-read.csv("PEP725_CH/PEP725_CH_Tilia.csv", header=TRUE)
switz.station<-read.csv("PEP725_CH/PEP725_CH_stations.csv", header=TRUE)
czech<-read.csv("PEP725_CZ/PEP725_CZ_Tilia.csv", header=TRUE)
czech.station<-read.csv("PEP725_CZ/PEP725_CZ_stations.csv", header=TRUE)
croatia<-read.csv("PEP725_HR/PEP725_HR_Tilia.csv", header=TRUE)
croa.station<-read.csv("PEP725_HR/PEP725_HR_stations.csv", header=TRUE)
germany<-read.csv("PEP725_DE/PEP725_DE_Tilia.csv", header=TRUE)
germ.station<-read.csv("PEP725_DE/PEP725_DE_stations.csv", header=TRUE)
spain<-read.csv("PEP725_ES/PEP725_ES_Tilia.csv", header=TRUE)
spain.station<-read.csv("PEP725_ES/PEP725_ES_stations.csv", header=TRUE)
ireland<-read.csv("PEP725_IE/PEP725_IE_Tilia.csv", header=TRUE)
ire.station<-read.csv("PEP725_IE/PEP725_IE_stations.csv", header=TRUE)
german2<-read.csv("PEP725_IP/PEP725_IP_Tilia.csv", header=TRUE)
german2.station<-read.csv("PEP725_IP/PEP725_IP_stations.csv", header=TRUE)
lat<-read.csv("PEP725_LT/PEP725_LT_Tilia.csv", header=TRUE) #Actually Lithuania
lat.station<-read.csv("PEP725_LT/PEP725_LT_stations.csv", header=TRUE)
mont<-read.csv("PEP725_ME/PEP725_ME_Tilia.csv", header=TRUE)
mont.station<-read.csv("PEP725_ME/PEP725_ME_stations.csv", header=TRUE)
neth<-read.csv("PEP725_NL/PEP725_NL_Tilia.csv", header=TRUE)
neth.station<-read.csv("PEP725_NL/PEP725_NL_stations.csv", header=TRUE)
pol<-read.csv("PEP725_PL/PEP725_PL_Tilia.csv", header=TRUE)
pol.station<-read.csv("PEP725_PL/PEP725_PL_stations.csv", header=TRUE)
slov<-read.csv("PEP725_SI/PEP725_SI_Tilia.csv", header=TRUE)
slov.station<-read.csv("PEP725_SI/PEP725_SI_stations.csv", header=TRUE)
vakia<-read.csv("PEP725_SK/PEP725_SK_Tilia.csv", header=TRUE) # ADDED!
vakia.station<-read.csv("PEP725_SK/PEP725_SK_stations.csv", header=TRUE) #ADDED!
at<-austria%>%filter(BBCH<=19)
at<-full_join(at, aust.station)
at<-dplyr::select(at, -NAME)
at<-na.omit(at)
bs<-bos%>%filter(BBCH<=19)
bs<-full_join(bs, bos.station)
bs<-dplyr::select(bs, -NAME)
bs<-na.omit(bs)
d<-bind_rows(at,bs)
ch<-switz%>%filter(BBCH<=19)
ch<-full_join(ch, switz.station)
ch<-dplyr::select(ch, -NAME)
ch<-na.omit(ch)
d<-bind_rows(d,ch)
cz<-czech%>%filter(BBCH<=19)
cz<-full_join(cz, czech.station)
cz<-dplyr::select(cz, -NAME)
cz<-na.omit(cz)
d<-bind_rows(d, cz)
es<-spain%>%filter(BBCH<=19)
es<-full_join(es, spain.station)
es<-dplyr::select(es, -NAME)
es<-na.omit(es)
d<-bind_rows(d, es)
gm<-germany%>%filter(BBCH<=19)
gm<-full_join(gm, germ.station)
gm<-dplyr::select(gm, -NAME)
gm<-na.omit(gm)
d<-bind_rows(d, gm)
hr<-croatia%>%filter(BBCH<=19)
hr<-full_join(hr, croa.station)
hr<-dplyr::select(hr, -NAME)
hr<-na.omit(hr)
d<-bind_rows(d, hr)
ie<-ireland%>%filter(BBCH<=19)
ie<-full_join(ie, ire.station)
ie<-dplyr::select(ie, -NAME)
ie<-na.omit(ie)
d<-bind_rows(d, ie)
ip<-german2%>%filter(BBCH<=19)
ip<-full_join(ip, german2.station)
ip<-dplyr::select(ip, -NAME)
ip<-na.omit(ip)
d<-bind_rows(d, ip)
la<-lat%>%filter(BBCH<=19)
la<-full_join(la, lat.station)
la<-dplyr::select(la, -NAME)
la<-na.omit(la)
d<-bind_rows(d, la)
me<-mont%>%filter(BBCH<=19)
me<-full_join(me, mont.station)
me<-dplyr::select(me, -NAME)
me<-na.omit(me)
d<-bind_rows(d, me)
pl<-pol%>%filter(BBCH<=19)
pl<-full_join(pl, pol.station)
pl<-dplyr::select(pl, -NAME)
pl<-na.omit(pl)
d<-bind_rows(d, pl)
nl<-neth%>%filter(BBCH<=19)
nl<-full_join(nl, neth.station)
nl<-dplyr::select(nl, -NAME)
nl<-na.omit(nl)
d<-bind_rows(d, nl)
si<-slov%>%filter(BBCH<=19)
si<-full_join(si, slov.station)
si<-dplyr::select(si, -NAME)
si<-na.omit(si)
d<-bind_rows(d, si)
sk<-vakia%>%filter(BBCH<=19)
sk<-full_join(sk, vakia.station)
sk<-dplyr::select(sk, -NAME)
sk<-na.omit(sk)
d<-bind_rows(d, sk)
#d<-na.omit(d)
d$species<-"TILCOR"
View(d)
write.csv(d, file="~/Documents/git/regionalrisk/analyses/output/bbch_region_tilia.csv", row.names = FALSE)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ncdf4)
library(Interpol.T)
library(chillR)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/analyses/output")
d<-read.csv("bbch_region_betula.csv", header=TRUE)
da<-read.csv("bbch_region.csv", header=TRUE)
ds<-read.csv("bbch_region_sambucus.csv", header=TRUE)
df<-read.csv("bbch_region_fagus.csv", header=TRUE)
dt<-read.csv("bbch_region_tilia.csv", header=TRUE)
eur.tempmn <- nc_open(file.path("~/Documents/git/regionalrisk/analyses/input/tn_0.25deg_reg_v15.0.nc"))
d<-full_join(d, da)
d<-full_join(d, ds)
d<-full_join(d, df)
d<-full_join(d, dt)
all<-d%>%filter(YEAR>=1950)
x<-paste(all$YEAR, all$DAY)
all$date<-as.Date(strptime(x, format="%Y %j"))
################## CLIMATE DATA?! ##############################
tempval <- list()
for(i in 1:nrow(all)){ # i = 1
# find this location
lo <- all[i,"LON"]
la <- all[i,"LAT"]
ndiff.long.cell <- abs(eur.tempmn$dim$longitude$vals-as.numeric(lo))
ndiff.lat.cell <- abs(eur.tempmn$dim$latitude$vals-as.numeric(la))
nlong.cell <- which(ndiff.long.cell==min(ndiff.long.cell))[1]
nlat.cell <- which(ndiff.lat.cell==min(ndiff.lat.cell))[1]
yr <- as.numeric(all[i,"YEAR"])#
# start and end days of the climate data we need for the lat/long
stday <- strptime(paste(yr, "01-02", sep="-"),"%Y-%m-%d", tz="GMT")#start day
# using fieldsample.date2, which is the same as fieldsampledate, but formatted as  "%Y-%m-%d"
#field sample date2 is the end day for chilling calculations
endday <- strptime(all[i,"date"],"%Y-%m-%d", tz = "GMT")
st <- as.numeric(as.character(stday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
en <- as.numeric(as.character(endday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
if(en<st){en=st}
if(endday<stday){endday=stday}
# get temperature values for this date range.
# check the dim of the netcdf file, str(netcdf), and see what the order of the different dimensions are. In this case, it goes long, lat, time. So when we are moving through the file, we give it the long and lat and date of start, then move through the files by going 'up' the cube of data to the end date
mins <- ncvar_get(eur.tempmn, 'tn',
start=c(nlong.cell,nlat.cell,st),
count=c(1, 1,en-st+1) )# this is where we move through the 'cube' to get the one vector of Temp mins
tempval[[as.character(all[i,"date"])]] <- data.frame(Lat = la,Long = lo, Date = seq(stday, endday, by="day"),
Tmin = mins)
}
###################### NEXT STEPS! ########################################
freezes <- vector()
for(i in names(tempval)){
xx <- tempval[[i]]
xx$Date<-strptime(xx$Date,"%Y-%m-%d", tz="GMT")
year = as.numeric(format(xx$Date, "%Y"))
month = as.numeric(format(xx$Date, "%m"))
day = as.numeric(format(xx$Date, "%d"))
lat = xx$Lat
long = xx$Long
acer = data.frame(year, month, day, Tmin = xx$Tmin, lat = xx$Lat, long = xx$Long)
freezes <- rbind(freezes, data.frame(acer))
}
View(freezes)
View(all)
all<-d%>%filter(YEAR>=1950)
View(all)
d<-dplyr::select(d, -X, -X.1)
all<-d%>%filter(YEAR>=1950)
x<-paste(all$YEAR, all$DAY)
all$date<-as.Date(strptime(x, format="%Y %j"))
tempval <- list()
for(i in 1:nrow(all)){ # i = 1
# find this location
lo <- all[i,"LON"]
la <- all[i,"LAT"]
ndiff.long.cell <- abs(eur.tempmn$dim$longitude$vals-as.numeric(lo))
ndiff.lat.cell <- abs(eur.tempmn$dim$latitude$vals-as.numeric(la))
nlong.cell <- which(ndiff.long.cell==min(ndiff.long.cell))[1]
nlat.cell <- which(ndiff.lat.cell==min(ndiff.lat.cell))[1]
yr <- as.numeric(all[i,"YEAR"])#
# start and end days of the climate data we need for the lat/long
stday <- strptime(paste(yr, "01-02", sep="-"),"%Y-%m-%d", tz="GMT")#start day
# using fieldsample.date2, which is the same as fieldsampledate, but formatted as  "%Y-%m-%d"
#field sample date2 is the end day for chilling calculations
endday <- strptime(all[i,"date"],"%Y-%m-%d", tz = "GMT")
st <- as.numeric(as.character(stday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
en <- as.numeric(as.character(endday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
if(en<st){en=st}
if(endday<stday){endday=stday}
# get temperature values for this date range.
# check the dim of the netcdf file, str(netcdf), and see what the order of the different dimensions are. In this case, it goes long, lat, time. So when we are moving through the file, we give it the long and lat and date of start, then move through the files by going 'up' the cube of data to the end date
mins <- ncvar_get(eur.tempmn, 'tn',
start=c(nlong.cell,nlat.cell,st),
count=c(1, 1,en-st+1) )# this is where we move through the 'cube' to get the one vector of Temp mins
tempval[[as.character(all[i,"date"])]] <- data.frame(Lat = la,Long = lo, Date = seq(stday, endday, by="day"),
Tmin = mins)
}
View(all)
freezes <- vector()
for(i in names(tempval)){
xx <- tempval[[i]]
xx$Date<-strptime(xx$Date,"%Y-%m-%d", tz="GMT")
year = as.numeric(format(xx$Date, "%Y"))
month = as.numeric(format(xx$Date, "%m"))
day = as.numeric(format(xx$Date, "%d"))
lat = xx$Lat
long = xx$Long
acer = data.frame(year, month, day, Tmin = xx$Tmin, lat = xx$Lat, long = xx$Long)
freezes <- rbind(freezes, data.frame(acer))
}
View(freezes)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ncdf4)
library(Interpol.T)
library(chillR)
library(ggmap)
library(maps)
library(mapdata)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/analyses/output")
d<-read.csv("bbch_region_betula.csv", header=TRUE)
d<-read.csv("bbch_region.csv", header=TRUE)
eur.tempmn <- nc_open(file.path("~/Documents/git/regionalrisk/analyses/input/tn_0.25deg_reg_v15.0.nc"))
all<-d%>%filter(YEAR>=1950)
x<-paste(all$YEAR, all$DAY)
all$date<-as.Date(strptime(x, format="%Y %j"))
################## CLIMATE DATA?! ##############################
tempval <- list()
for(i in 1:nrow(all)){ # i = 1
# find this location
lo <- all[i,"LON"]
la <- all[i,"LAT"]
ndiff.long.cell <- abs(eur.tempmn$dim$longitude$vals-as.numeric(lo))
ndiff.lat.cell <- abs(eur.tempmn$dim$latitude$vals-as.numeric(la))
nlong.cell <- which(ndiff.long.cell==min(ndiff.long.cell))[1]
nlat.cell <- which(ndiff.lat.cell==min(ndiff.lat.cell))[1]
yr <- as.numeric(all[i,"YEAR"])#
# start and end days of the climate data we need for the lat/long
stday <- strptime(paste(yr, "01-02", sep="-"),"%Y-%m-%d", tz="GMT")#start day
# using fieldsample.date2, which is the same as fieldsampledate, but formatted as  "%Y-%m-%d"
#field sample date2 is the end day for chilling calculations
endday <- strptime(all[i,"date"],"%Y-%m-%d", tz = "GMT")
st <- as.numeric(as.character(stday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
en <- as.numeric(as.character(endday - strptime("1950-01-01", "%Y-%m-%d", tz = "GMT")))
if(en<st){en=st}
if(endday<stday){endday=stday}
# get temperature values for this date range.
# check the dim of the netcdf file, str(netcdf), and see what the order of the different dimensions are. In this case, it goes long, lat, time. So when we are moving through the file, we give it the long and lat and date of start, then move through the files by going 'up' the cube of data to the end date
mins <- ncvar_get(eur.tempmn, 'tn',
start=c(nlong.cell,nlat.cell,st),
count=c(1, 1,en-st+1) )# this is where we move through the 'cube' to get the one vector of Temp mins
tempval[[as.character(all[i,"date"])]] <- data.frame(Lat = la,Long = lo, Date = seq(stday, endday, by="day"),
Tmin = mins)
}
###################### NEXT STEPS! ########################################
freezes <- vector()
for(i in names(tempval)){
xx <- tempval[[i]]
xx$Date<-strptime(xx$Date,"%Y-%m-%d", tz="GMT")
year = as.numeric(format(xx$Date, "%Y"))
month = as.numeric(format(xx$Date, "%m"))
day = as.numeric(format(xx$Date, "%d"))
lat = xx$Lat
long = xx$Long
acer = data.frame(year, month, day, Tmin = xx$Tmin, lat = xx$Lat, long = xx$Long)
freezes <- rbind(freezes, data.frame(acer))
}
View(freezes)
