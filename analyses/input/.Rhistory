options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.5, 2.5), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.5, 2.5), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
library(gridExtra)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=False.Springs,color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2,
labels=c("A","B"))
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme((legend.position = position), labels=c("A","B")))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme((legend.position="none"), labels=c("A","B")))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
labels = c("A", "B"),
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
install.packages("cowplot")
library(cowplot)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs")  +
guides(size=FALSE)
plot2 <- eur.map
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
legend <- get_legend(eur.map)
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.3, 2.3, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B", ""))
grid.arrange(am.map, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ncdf4)
library(Interpol.T)
library(chillR)
library(raster)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/analyses/input")
eur.temp <- nc_open(file.path("tn_0.25deg_reg_v15.0.nc"))
raster1<-brick("tn_0.25deg_reg_v15.0.nc", varname="tn", sep="")
names(eur.temp)
names(raster1)
leap.year(raster1)
dates<-strptime(raster1$names, 7,10)
dates<-substr(raster1$names, 7,10)
dates<-substr([names(raster1)], 7,10)
dates<-substr(names(raster1), 7,10)
leaps<-ifelse(dates=="02.29",NA,dates)
leaps
dates<-substr(names(raster1), 7,11)
leaps<-ifelse(dates=="02.29",NA,dates)
leaps
tot<-sum(which(leaps==NA))
tot<-sum(leaps==NA))
tot<-sum(leaps==NA)
dates<-as.dataframe(substr(names(raster1), 7,11))
dates<-as.data.frame(substr(names(raster1), 7,11))
View(dates)
