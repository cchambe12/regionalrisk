library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('scripts/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
load("~/Documents/git/freezingexperiment/analyses/output/buds_2level_fakedata.Rda")
betas <- as.matrix(osp.td4, pars = c("mu_b_tx","mu_b_sp",
"b_tx", "b_sp"))
mcmc_intervals(betas[,1:4])
launch_shinystan(osp.td4)
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('scripts/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
# make sure this is the correct file (we're still cleaning as I write this!)
#bb <- read.csv("output/birches_buddata.csv", header=TRUE)
#bb <- subset(bb, bb$species=="BETPOP")
bb<-read.csv("output/birches_speciesdata.csv", header=TRUE)
bb$tx <- as.numeric(bb$tx)
bb$sp <- as.numeric(bb$sp)
bb$resp <- as.numeric(bb$dvr)
bb$ind <- as.numeric(bb$ind)
View(bb)
bb<-read.csv("output/birches_speciesdata.csv", header=TRUE)
View(bb)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(bb$tx)
View(bb)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$resp <- as.numeric(bb$dvr)
View(bb)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
View(bb)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "sp", "ind"))
View(bb)
View(ospr.prepdata)
bb$dvr <- as.numeric(bb$dvr)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "sp", "ind"))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
sp = ospr.stan$sp
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
n_sp = length(unique(ospr.stan$sp))
datalist.td <- list(dvr=dvr,tx=tx, sp=sp,ind=ind,N=N,n_ind=n_ind, n_sp=n_sp)
osp.td4 = stan('scripts/buds_sp_pred_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx","mu_b_sp",
"b_tx", "b_sp"))
mcmc_intervals(betas[,1:4])
launch_shinystan(osp.td4)
View(ospr.stan)
View(ospr.stan)
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
sp = ospr.stan$sp
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
n_sp = length(unique(ospr.stan$sp))
datalist.td <- list(dvr=dvr,tx=tx, sp=sp,ind=ind,N=N,n_ind=n_ind, n_sp=n_sp)
osp.td4 = stan('scripts/buds_sp_pred_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx","mu_b_sp",
"b_tx", "b_sp"))
mcmc_intervals(betas[,1:4])
launch_shinystan(osp.td4)
View(ospr.stan)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(bb$tx)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "sp", "ind"))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
sp = ospr.stan$sp
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
n_sp = length(unique(ospr.stan$sp))
datalist.td <- list(dvr=dvr,tx=tx, sp=sp,ind=ind,N=N,n_ind=n_ind, n_sp=n_sp)
osp.td4 = stan('scripts/buds_sp_pred_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx","mu_b_sp",
"b_tx", "b_sp"))
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
datalist.td <- list(dvr=dvr,tx=tx,ind=ind,N=N,n_ind=n_ind) # removed sp=sp and n_sp=s_sp for one species
osp.td4 = stan('scripts/buds_sp_pred_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx","mu_b_sp",
"b_tx", "b_sp"))
mcmc_intervals(betas[,1:4])
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb<-read.csv("output/birches_speciesdata.csv", header=TRUE)
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(bb$tx)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
datalist.td <- list(dvr=dvr,tx=tx,ind=ind,N=N,n_ind=n_ind) # removed sp=sp and n_sp=s_sp for one species
osp.td4 = stan('scripts/buds_sp_pred_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
View(ospr.stan)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(bb$tx)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
datalist.td <- list(dvr=dvr,tx=tx,ind=ind,N=N,n_ind=n_ind) # removed sp=sp and n_sp=s_sp for one species
osp.td4 = stan('scripts/buds_onespp_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx","mu_b_sp",
"b_tx", "b_sp"))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx",
"b_tx"))
launch_shinystan(osp.td4)
birch<-read.csv("output/birches_buddata.csv", header=TRUE)
View(birch)
bpap<-ggplot(birch, aes(x=bud, y=dvr, color=frost)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
bpap
bpap<-ggplot(birch, aes(x=bud, y=dvr, color=as.factor(frost))) + geom_point() + geom_smooth(method="lm") + facet_wrap(~species)
bpap
mod1<-lmer(dvr~as.factor(frost)+species+(1|individ), data=birch)
display(mod1)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(as.factor(bb$frost))
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$tx <- as.numeric(as.factor(bb$frost))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
setwd("~/Documents/git/freezingexperiment/analyses/")
source('scripts/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb$tx <- as.numeric(as.factor(bb$frost))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
bb$ind <- as.numeric(bb$ind)
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
datalist.td <- list(dvr=dvr,tx=tx,ind=ind,N=N,n_ind=n_ind) # removed sp=sp and n_sp=s_sp for one species
osp.td4 = stan('scripts/buds_onespp_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx",
"b_tx"))
mcmc_intervals(betas[,1:4])
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
bb$tx <- as.numeric(as.factor(bb$frost))
bb$dvr <- as.numeric(bb$dvr)
bb$ind <- as.numeric(as.factor(bb$bud))
ospr.prepdata <- subset(bb, select=c("dvr", "tx", "ind")) # removed "sp" when doing just one species
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$ind <- as.numeric(as.factor(ospr.stan$ind))
dvr = ospr.stan$dvr
tx = ospr.stan$tx
ind = ospr.stan$ind
N = length(dvr)
n_ind = length(unique(ospr.stan$ind))
datalist.td <- list(dvr=dvr,tx=tx,ind=ind,N=N,n_ind=n_ind) # removed sp=sp and n_sp=s_sp for one species
osp.td4 = stan('scripts/buds_onespp_poola.stan', data = datalist.td,
iter = 3000,warmup=3000,control=list(adapt_delta=0.99))
betas <- as.matrix(osp.td4, pars = c("mu_b_tx",
"b_tx"))
birch<-read.csv("output/birches_buddata.csv", header=TRUE)
stan_glm(dvr~tx+species+(1|individ), data=birch)
stan_glmer(dvr~tx+species+(1|individ), data=birch)
stan_glmer(dvr~tx+species+(1|individ), data=birch[subset(species=="BETPOP")])
stan_glmer(dvr~tx+species+(1|individ), data=birch[subset(sp=="BETPOP")])
stan_glmer(dvr~tx+species+(1|individ), data=birch[subset(birch$species=="BETPOP")])
stan_glmer(dvr~tx+species+(1|individ), data=birch[birch$species=="BETPOP"])
stan_glmer(dvr~tx+species+(1|individ), data=birch[(birch$species=="BETPOP"),])
stan_glmer(dvr~tx+(1|individ), data=birch[(birch$species=="BETPOP"),])
View(bb)
birch$ind<-substr(birch$individ, 9, 10)
View(birch)
birch$ind<-as.numeric(as.factor(birch$ind))
View(bb)
View(birch)
table(birch$ind, birch$species)
birch$ind<-aggregate(birch$tx, by = birch[c('species','individ')], length)
birch$ind<-aggregate(birch$tx, by = birch$species, length)
birch$ind<-aggregate(birch$tx, by = birch[c("species")], length)
birch$ind<-aggregate(birch$ind, by = birch[c("species", "birch$tx")], length)
birch$ind<-aggregate(birch$ind, by = birch[c("species", "tx")], length)
birch$ind<-aggregate(birch$ind, by = birch[c("individ", "species", "tx")], length)
birch$ind<-aggregate(birch$ind, by = birch[c("species", "tx")], length)
birch$ind<-aggregate(birch$individ, by = birch[c("species", "tx")], length)
birch$ind<-with(birch, tapply(individ, list(tx, species),
FUN = function(x) length(unique(x))))
bb<-birch
bb<-dplyr::select(species, individ, tx)
bb<-dplyr::select(bb,species, individ, tx)
bb$ind<-with(bb, tapply(individ, list(tx, species),
FUN = function(x) length(unique(x))))
bb$indivd<-with(bb, tapply(individ, list(tx, species),
FUN = function(x) length(unique(x))))
bb$individ<-aggregate(bb$individ, by = bb[c('tx','species')], length)
View(bb)
bb<-bb[!duplicated(bb),]
bb$individ<-aggregate(bb$species, by=bb$tx, length)
bb$individ<-aggregate(bb$species, by=bb[c("tx")], length)
bb$individ<-aggregate(bb$individ, by=bb[c("tx")], length)
bb$individ<-aggregate(bb$individ, by=bb[c("tx", "species")], length)
bb$individ<-with(bb, tapply(individ, list(species, tx), FUN=function(x) length(unique(x))))
bb<-as.data.frame(table(birch$tx, birch$species))
View(bb)
bb<-as.data.frame(table(birch$individ, birch$tx, birch$species))
View(bb)
bb<-birch
bb<-dplyr::select(bb,species, individ, tx)
View(bb)
bb<-bb[!duplicated(bb),]
View(bb)
bb$ind<-with(bb, tapply(tx, list(species), FUN=function(x) length(unique(x))))
bb<-with(bb, tapply(tx, list(species), FUN=function(x) length(unique(x))))
with(bb, tapply(tx, list(species), FUN=function(x) length(unique(x))))
bb<-birch
bb<-dplyr::select(bb,species, individ, tx)
bb<-bb[!duplicated(bb),]
View(bb)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(1, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(0, head(x, 0)))
)
View(bb)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(0, head(x, 1)))
)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(1, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$tx, bb$species,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$individ, bb$species, bb$tx,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$individ, bb$tx, bb$species,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
bb$ind <- ave(
bb$tx, bb$species, bb$individ,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$species, bb$tx, bb$individ,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb<-dplyr::select(bb, -individ)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$tx, bb$species,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(bb)
bb$ind <- ave(
bb$tx, bb$species,
FUN=function(x) length(x)))
bb$ind <- ave(
bb$tx, bb$species,
FUN=function(x) length(x))
View(bb)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) length(x))
View(bb)
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) sum(x))
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(x))
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(x, head(x, -1)))
bb$ind <- ave(
bb$species, bb$tx,
FUN=function(x) cumsum(c(x, head(x, -1)))
)
bb$ind<- count(bb, by=c("species", "tx"))
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ncdf4)
library(Interpol.T)
library(chillR)
library(raster)
library(maptools)
library(rgeos)
library(rgdal)
# Set Working Directory
setwd("~/Documents/git/regionalrisk/analyses/input")
raster1<-brick("~/Desktop/tn_0.25deg_reg_v16.0.nc", varname="tn", sep="")
eur.temp<-nc_open("~/Desktop/tn_0.25deg_reg_v16.0.nc")
raster1<-brick("//WeldShare/Wolkovich Lab/Budburst Review - Ospree/Climate Data/tn_0.25deg_reg_v15.0.nc", varname="tn", sep="")
eur.temp <- nc_open("//128.103.155.31/WeldShare/Wolkovich Lab/Budburst Review - Ospree/Climate Data/tn_0.25deg_reg_v15.0.nc")
plot(raster1[[45]])
#raster1 <- setMinMax(raster1)
#length(doy)/365
doy<-ncvar_get(eur.temp, "time")
doy<-as.Date(doy, origin="1950-01-01")
day<-substr(doy, 9,10)
year<-as.numeric(substr(doy, 1, 4))
month<-as.numeric(substr(doy, 6, 7))
timevec<-paste(year, month, day, sep="-")
years.vec<-as.character(timevec, format="Y-%m-%d")
year<-as.numeric(substr(years.vec, 1, 4))
#doy.vec<-as.POSIXlt(names(raster1), format="X%j")
dates<-as.Date(years.vec)
names(raster1)<-dates
empty.raster<-raster1[[1]]
values(empty.raster)<-NA
years<-1950:2016
leaps <- function(x) {
m <- c()
for(i in 1:50) {
year.i <- years[which(((years %% 4 == 0) & (years %% 100 !=0) | (years %% 400 == 0)))]
m <- c(m, year.i)
}
return(m)
}
leap.years<-as.data.frame(leaps(1))
leap.years<-leap.years[!duplicated(leaps(1)),]
#year<-1950:2016
empty.raster<-raster1[[1]]
num.false.spring.year<-list()
#dates.false.spring<-list()
for(i in 1950:1983){#i=1952
print(i)
year.i<-i
is.leap<-ifelse(year.i%in%leap.years,TRUE,FALSE)
sequence.years<-which(year==year.i)
#length(sequence.years)
raster.sub<-subset(raster1,sequence.years)
#numnonas<-sum(!is.na(values(raster.sub[[1]])))
rast.array<-array(75,dim=c(ncell(raster.sub),181))
if(is.leap){
for(j in 75:181){ ## you need to change
print(paste(year.i,j))
rast.array[,j]<-values(raster.sub[[j]])
}
}
if(!is.leap){
for(j in 75:181){ ## you need to change
print(paste(year.i,j))
rast.array[,j]<-values(raster.sub[[j]])
}
}
#dates.fs<-apply(rast.array, 1, function(x){ifelse(x<=-2.2, x, 0)})
num.false.spring<-apply(rast.array,1,function(x){sum(ifelse(x<=-2.2,1,0))})
non.nas.ids<-which(!is.na(num.false.spring))
#values(emp.rast)<-NA
values(empty.raster)<- NA
#non.nas.dates<-which(!is.na(dates.fs))
#plot(raster1[[1]])
values(empty.raster)[non.nas.ids]<- num.false.spring[!is.na(num.false.spring)]
#values(empty.raster)[non.nas.dates]<- dates.fs[!is.na(dates.fs)]
#plot(empty.raster)
#dates.false.spring[[i]]<- empty.raster
num.false.spring.year[[i]]<-empty.raster
}
final.raster.preCC<-stack(unlist(num.false.spring.year))
mean.false.springs.preCC<-calc(final.raster.preCC,mean)
writeRaster(mean.false.springs.preCC,"~/Documents/git/regionalrisk/analyses/output/meanperyear_pre", bylayer=TRUE,format="GTiff")
writeRaster(mean.false.springs.preCC,"~/Documents/git/regionalrisk/analyses/output/meanperyear_pre", bylayer=TRUE,format="GTiff", overwrite=TRUE)
num.false.spring.year.post<-list()
for(i in 1984:2016){#i=1952
print(i)
year.i<-i
is.leap<-ifelse(year.i%in%leap.years,TRUE,FALSE)
sequence.years.post<-which(year==year.i)
#length(sequence.years)
raster.sub.post<-subset(raster1,sequence.years.post)
#numnonas<-sum(!is.na(values(raster.sub[[1]])))
rast.array.post<-array(0,dim=c(ncell(raster.sub.post),181))
if(is.leap){
for(j in 75:181){ ## you need to change
print(paste(year.i,j))
rast.array.post[,j]<-values(raster.sub.post[[j]])
}
}
if(!is.leap){
for(j in 75:181){ ## you need to change
print(paste(year.i,j))
rast.array.post[,j]<-values(raster.sub.post[[j]])
}
}
num.false.spring.post<-apply(rast.array.post,1,function(x){sum(ifelse(x<=-2.2,1,0))})
non.nas.ids.post<-which(!is.na(num.false.spring.post))
values(empty.raster)<- NA
#plot(raster1[[1]])
values(empty.raster)[non.nas.ids.post]<- num.false.spring.post[!is.na(num.false.spring.post)]
#values(empty.raster)[num.false.spring]<- num.false.spring[!is.na(num.false.spring)]
#plot(empty.raster)
num.false.spring.year.post[[i]]<-empty.raster
}
final.raster.postCC<-stack(unlist(num.false.spring.year.post))
mean.false.springs.postCC<-calc(final.raster.postCC,mean)
writeRaster(mean.false.springs.postCC,"~/Documents/git/regionalrisk/analyses/output/meanperyear_post", bylayer=TRUE,format="GTiff", overwrite=TRUE)
