sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
#sh<-hist(fake.s$dp.s)
#grid.arrange(sg,sh, ncol=1, nrow=2)
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
fake$child<- as.numeric(sample(10))
fake.e$child.e<-as.numeric(sample(10))
fake.s$child.s<-as.numeric(sample(30))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
library(arm)
library(ggplot2)
library(gridExtra)
## What is the effect size in this example?
ES = (55-45)/5 ## ES = 2
SE = 5/(sqrt(100)) ## SE = 0.16
## What about when we triple the effect size?
ES = (75-45)/5 ## ES = 6
SE = 5/(sqrt(100)) ## SE stays the same
## How about when we triple the sample size?
ES = (55-45)/5 ## ES is 2 like before but...
SE = 5/(sqrt(300)) ## SE decreases slightly - SE = 0.09
### Andrew states that " it is generally better to double the effect size [theta] than to double the sample size [n]"
## here we can see that doubling the sample size decreases the standard error at a slower rate than doubling the effect size
# The SE: effect size influences the numerator, sample size influences the denominator
nsunny = 2
rep = 50
ntot = nsunny*rep
sunny = gl(nsunny, rep, length=ntot)
sunnydiff = 10
sunnydiff.sd = 0
suns<-rnorm(ntot, 55, 5)
base <- 45
child <- base + suns-mean(suns)
mm <- model.matrix(~(sunny)^2, data.frame=(sunny))
fake <- vector()
for (i in 1:length(ntot)){
coeff <- c(child[i],
rnorm(1, sunnydiff, sunnydiff.sd)
)
dp <- rnorm(n = length(sunny), mean = mm %*% coeff, sd = 5)
fake <- data.frame(dp=dp, sunny=sunny)
}
hist(fake$dp[sunny==1])
hist(fake$dp[sunny==2])
mean(fake$dp) # 50.5
sd(fake$dp) # 7.24
display(lm(dp~sunny, data=fake))
#lm(formula = dp ~ sunny, data = fake)
#coef.est coef.se
#(Intercept) 45.33     0.23
#sunny2      10.25     0.32
#---
#  n = 1000, k = 2
#residual sd = 5.11, R-Squared = 0.50
### Alright, now let's triple the effect size...
### Sunny D increases the level of dopamine to 75 ng/ml - we'll keep the sample size the same
nsunny.e = 2
rep.e = 50
ntot.e = nsunny.e*rep.e
sunny.e = gl(nsunny.e, rep.e, length=ntot.e)
sunnydiff.e = 30
sunnydiff.sd.e = 0
suns.e<-rnorm(ntot.e, 75, 5)
base.e <- 45
child.e <- base.e + suns.e-mean(suns.e)
mm.e <- model.matrix(~(sunny.e)^2, data.frame=(sunny.e))
fake.e <- vector()
for (i in 1:length(ntot.e)){
coeff.e <- c(child.e[i],
rnorm(1, sunnydiff.e, sunnydiff.sd.e)
)
dp.e <- rnorm(n = length(sunny.e), mean = mm.e %*% coeff.e, sd = 5)
fake.e <- data.frame(dp.e=dp.e, sunny.e=sunny.e)
}
hist(fake.e$dp.e[sunny.e==1])
hist(fake.e$dp.e[sunny.e==2])
mean(fake.e$dp.e) # 61.2
sd(fake.e$dp.e) # 15.9
display(lm(dp.e~sunny.e, data=fake.e))
#lm(formula = dp.e ~ sunny.e, data = fake.e)
#coef.est coef.se
#(Intercept) 46.04     0.22
#sunny.e2    30.24     0.31
#---
#  n = 1000, k = 2
#residual sd = 4.94, R-Squared = 0.90
## And now, we triple the sample size...
nsunny.s = 2
rep.s = 150
ntot.s = nsunny.s*rep.s
sunny.s = gl(nsunny.s, rep.s, length=ntot.s)
sunnydiff.s = 10
sunnydiff.sd.s = 0
suns.s<-rnorm(ntot.s, 55, 5)
base.s <- 45
child.s <- base.s + suns.s-mean(suns.s)
mm.s <- model.matrix(~(sunny.s)^2, data.frame=(sunny.s))
fake.s <- vector()
for (i in 1:length(ntot.s)){
coeff.s <- c(child.s[i],
rnorm(1, sunnydiff.s, sunnydiff.sd.s)
)
dp.s <- rnorm(n = length(sunny.s), mean = mm.s %*% coeff.s, sd = 5)
fake.s <- data.frame(dp.s=dp.s, sunny.s=sunny.s)
}
hist(fake.s$dp.s)
mean(fake.s$dp.s) # 52.8
sd(fake.s$dp.s) # 6.93
display(lm(dp.s~sunny.s, data=fake.s))
#lm(formula = dp.s ~ sunny.s, data = fake.s)
#coef.est coef.se
#(Intercept) 48.01     0.13
#sunny.s2     9.66     0.18
#---
#  n = 3000, k = 2
#residual sd = 4.97, R-Squared = 0.49
#### Let's plot the effects!
fake$sunny<-ifelse(fake$sunny==1, "control", "sunnyD")
base<- qplot(sunny, dp, data = fake, geom="boxplot", color=sunny) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.e$sunny.e<-ifelse(fake.e$sunny.e==1, "control", "sunnyD")
effect<- qplot(sunny.e, dp.e, data = fake.e, geom="boxplot", color=sunny.e) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.s$sunny.s<-ifelse(fake.s$sunny.s==1, "control", "sunnyD")
sample<- qplot(sunny.s, dp.s, data = fake.s, geom="boxplot", color=sunny.s) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
grid.arrange(base, effect, sample, ncol=3, nrow=1)
fake$child<- as.numeric(sample(100))
fake.e$child.e<-as.numeric(sample(100))
fake.s$child.s<-as.numeric(sample(300))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
display(mod.base);display(mod.e);display(mod.s)
mod.base<-lm(dp~sunny, data=fake)
mod.e<-lm(dp.e~sunny.e, data=fake.e)
mod.s<-lm(dp.s~sunny.s, data=fake.s)
display(mod.base);display(mod.e);display(mod.s)
rm(list=ls())
options(stringsAsFactors = FALSE)
# Load Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
#library(egg)
#library(purrr)
#library(broom)
library(brms)
# Setting working directory
setwd("~/Documents/git/regionalrisk/analyses/")
bb<-read.csv("output/regrisk.cleaned.csv", header=TRUE)
dxx<-read.csv("output/fs_matspring.csv", header=TRUE)
x<-read.csv("output/fs_bb_sitedata.csv", header = TRUE)
dxx$fs.yr<-ave(dxx$fs, dxx$year, FUN=sum)
dxx$fs.yrspp<-ave(dxx$fs, dxx$species, dxx$year, FUN=sum)
dxx$spp.prop<-NA
dxx$spp.sites<-as.numeric(ave(dxx$lat.long, dxx$year, dxx$species, FUN=length))
dxx$spp.prop<-ifelse(dxx$species=="AESHIP", dxx$fs.yrspp/dxx$spp.sites, dxx$spp.prop)
dxx$spp.prop<-ifelse(dxx$species=="ALNGLU", dxx$fs.yrspp/dxx$spp.sites, dxx$spp.prop)
dxx$spp.prop<-ifelse(dxx$species=="BETPEN", dxx$fs.yrspp/dxx$spp.sites, dxx$spp.prop)
dxx$spp.prop<-ifelse(dxx$species=="FAGSYL", dxx$fs.yrspp/dxx$spp.sites, dxx$spp.prop)
dxx$spp.prop<-ifelse(dxx$species=="FRAEXC", dxx$fs.yrspp/dxx$spp.sites, dxx$spp.prop)
dxx$spp.prop<-ifelse(dxx$species=="QUEROB", dxx$fs.yrspp/dxx$spp.sites, dxx$spp.prop)
dxx$spp.ave<-ave(dxx$spp.prop, dxx$species, FUN=median)
dxx$num.sites<-as.numeric(ave(dxx$lat.long, dxx$year, FUN=length))
dxx$fs.prop<-dxx$fs.yr/dxx$num.sites
dxx$fs.ave<-ave(dxx$fs.prop, FUN=median)
x<-x%>%rename(lat=LAT)%>%rename(long=LON)%>%rename(elev=ALT)
x<-dplyr::select(x, species, year, bb, bb.yr, lat, long, elev)
x<-x[!duplicated(x),]
dxx<-subset(dxx, select=c("species", "year", "lat", "long", "fs.prop", "spp.prop", "num.sites"))
df<-inner_join(bb, dxx)
df<-inner_join(df, x)
df<-df[!duplicated(df),]
### Let's look at NAO and bb
cols<-c("bb", "cc", "m.index", "species", "elev")
bb.nao<-subset(df, select=cols)
bb.nao<-bb.nao[!duplicated(bb.nao),]
bb.nao$sm.elev<-bb.nao$elev/100
#bb.nao$species<-as.numeric(as.factor(bb.nao$species))
bbnao.mod<-brm(bb~cc+m.index+sm.elev+cc:m.index+(cc+m.index+sm.elev+cc:m.index|species), data=bb.nao, chains=2, cores=4)
m<-bbnao.mod
m.int<-posterior_interval(m)
sum.m<-summary(m)
cri.f<-as.data.frame(sum.m$fixed[,c("Estimate", "l-95% CI", "u-95% CI")])
cri.f<-cri.f[-1,] #removing the intercept
fdf1<-as.data.frame(rbind(as.vector(cri.f[,1]), as.vector(cri.f[,2]), as.vector(cri.f[,3])))
fdf2<-cbind(fdf1, c(0, 0, 0) , c("Estimate", "2.5%", "95%"))
names(fdf2)<-c(rownames(cri.f), "species", "perc")
cri.r<-(ranef(m, summary = TRUE, robust = FALSE,
probs = c(0.025, 0.975)))$species
cri.r2<-cri.r[, ,-1]
cri.r2<-cri.r2[,-2,]
dims<-dim(cri.r2)
twoDimMat <- matrix(cri.r2, prod(dims[1:2]), dims[3])
mat2<-cbind(twoDimMat, c(rep(1:6, length.out=18)), rep(c("Estimate", "2.5%", "95%"), each=6))
df<-as.data.frame(mat2)
names(df)<-c(rownames(cri.f), "species", "perc")
dftot<-rbind(fdf2, df)
dflong<- tidyr::gather(dftot, var, value, cc:`cc:m.index`, factor_key=TRUE)
#adding the coef estiamtes to the random effect values
for (i in seq(from=1,to=nrow(dflong), by=21)) {
for (j in seq(from=3, to=20, by=1)) {
dflong$value[i+j]<- as.numeric(dflong$value[i+j]) + as.numeric(dflong$value[i])
}
}
dflong$rndm<-ifelse(dftot$species>0, 2, 1)
dfwide<-tidyr::spread(dflong, perc, value)
dfwide[,4:6] <- as.data.frame(lapply(c(dfwide[,4:6]), as.numeric ))
dfwide$species<-as.factor(dfwide$species)
pd <- position_dodgev(height = -0.5)
library(ggstance)
pd <- position_dodgev(height = -0.5)
estimates<-c("Before or After 1983", "NAO", "Elevation" "CC x NAO")
estimates<-c("Before or After 1983", "NAO", "Elevation", "CC x NAO")
dfwide$legend<-factor(dfwide$species,
labels=c("Overall Effects","Aesculus hippocastanum","Alnus glutinosa",
"Betula pendula","Fagus sylvatica","Fraxinus excelsior",
"Quercus robur"))
estimates<-rev(estimates)
#write.csv(dfwide, file="~/Documents/git/springfreeze/output/df_modforplot.csv", row.names=FALSE)
fig1 <-ggplot(dfwide, aes(x=Estimate, y=var, color=legend, size=factor(rndm), alpha=factor(rndm)))+
geom_point(position =pd)+
geom_errorbarh(aes(xmin=(`2.5%`), xmax=(`95%`)), position=pd, size=.5, width=0)+
geom_vline(xintercept=0)+
scale_colour_manual(values=c("blue", "firebrick3", "orangered1","orange3", "sienna2", "green4", "purple2"),
labels=c("Overall Effects",
"Aesculus hippocastanum" = expression(paste(italic("Aesculus hippocastanum"))),
"Alnus glutinosa" = expression(paste(italic("Alnus glutinosa"))),
"Betula pendula" = expression(paste(italic("Betula pendula"))),
"Fagus sylvatica" = expression(paste(italic("Fagus sylvatica"))),
"Fraxinus excelsior" = expression(paste(italic("Fraxinus excelsior"))),
"Quercus robur" = expression(paste(italic("Quercus robur")))))+
scale_size_manual(values=c(3, 2, 2, 2, 2, 2, 2, 2, 2, 2)) +
scale_shape_manual(labels="", values=c("1"=16,"2"=16))+
scale_alpha_manual(values=c(1, 0.5)) +
guides(size=FALSE, alpha=FALSE) +
scale_y_discrete(limits = rev(unique(sort(dfwide$var))), labels=estimates) + ylab("") +
labs(col="Effects") + theme(legend.box.background = element_rect(),
legend.title=element_blank(), legend.key=element_blank(),legend.key.size = unit(0.15, "cm"),
legend.text=element_text(size=8), legend.position= c(0.78,0.88), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) #+
#xlab(expression(atop("Model Estimate of Change ", paste("in Duration of Vegetative Risk (days)"))))
quartz()
fig1
#bb.nao$species<-as.numeric(as.factor(bb.nao$species))
bbnao.mod<-brm(bb~cc+m.index+sm.elev+cc:sm.elev+cc:m.index+(cc+m.index+sm.elev+cc:sm.elev+cc:m.index|species), data=bb.nao, chains=2, cores=4)
m<-bbnao.mod
m.int<-posterior_interval(m)
sum.m<-summary(m)
cri.f<-as.data.frame(sum.m$fixed[,c("Estimate", "l-95% CI", "u-95% CI")])
cri.f<-cri.f[-1,] #removing the intercept
fdf1<-as.data.frame(rbind(as.vector(cri.f[,1]), as.vector(cri.f[,2]), as.vector(cri.f[,3])))
fdf2<-cbind(fdf1, c(0, 0, 0) , c("Estimate", "2.5%", "95%"))
names(fdf2)<-c(rownames(cri.f), "species", "perc")
cri.r<-(ranef(m, summary = TRUE, robust = FALSE,
probs = c(0.025, 0.975)))$species
cri.r2<-cri.r[, ,-1]
cri.r2<-cri.r2[,-2,]
dims<-dim(cri.r2)
twoDimMat <- matrix(cri.r2, prod(dims[1:2]), dims[3])
mat2<-cbind(twoDimMat, c(rep(1:6, length.out=18)), rep(c("Estimate", "2.5%", "95%"), each=6))
df<-as.data.frame(mat2)
names(df)<-c(rownames(cri.f), "species", "perc")
dftot<-rbind(fdf2, df)
dflong<- tidyr::gather(dftot, var, value, cc:`cc:m.index`, factor_key=TRUE)
#adding the coef estiamtes to the random effect values
for (i in seq(from=1,to=nrow(dflong), by=21)) {
for (j in seq(from=3, to=20, by=1)) {
dflong$value[i+j]<- as.numeric(dflong$value[i+j]) + as.numeric(dflong$value[i])
}
}
dflong$rndm<-ifelse(dftot$species>0, 2, 1)
dfwide<-tidyr::spread(dflong, perc, value)
dfwide[,4:6] <- as.data.frame(lapply(c(dfwide[,4:6]), as.numeric ))
dfwide$species<-as.factor(dfwide$species)
pd <- position_dodgev(height = -0.5)
estimates<-c("Before or After 1983", "NAO", "Elevation", "CC x NAO")
estimates<-c("Before or After 1983", "NAO", "Elevation", "CC x Elevation",  "CC x NAO")
dfwide$legend<-factor(dfwide$species,
labels=c("Overall Effects","Aesculus hippocastanum","Alnus glutinosa",
"Betula pendula","Fagus sylvatica","Fraxinus excelsior",
"Quercus robur"))
estimates<-rev(estimates)
#write.csv(dfwide, file="~/Documents/git/springfreeze/output/df_modforplot.csv", row.names=FALSE)
fig1 <-ggplot(dfwide, aes(x=Estimate, y=var, color=legend, size=factor(rndm), alpha=factor(rndm)))+
geom_point(position =pd)+
geom_errorbarh(aes(xmin=(`2.5%`), xmax=(`95%`)), position=pd, size=.5, width=0)+
geom_vline(xintercept=0)+
scale_colour_manual(values=c("blue", "firebrick3", "orangered1","orange3", "sienna2", "green4", "purple2"),
labels=c("Overall Effects",
"Aesculus hippocastanum" = expression(paste(italic("Aesculus hippocastanum"))),
"Alnus glutinosa" = expression(paste(italic("Alnus glutinosa"))),
"Betula pendula" = expression(paste(italic("Betula pendula"))),
"Fagus sylvatica" = expression(paste(italic("Fagus sylvatica"))),
"Fraxinus excelsior" = expression(paste(italic("Fraxinus excelsior"))),
"Quercus robur" = expression(paste(italic("Quercus robur")))))+
scale_size_manual(values=c(3, 2, 2, 2, 2, 2, 2, 2, 2, 2)) +
scale_shape_manual(labels="", values=c("1"=16,"2"=16))+
scale_alpha_manual(values=c(1, 0.5)) +
guides(size=FALSE, alpha=FALSE) +
scale_y_discrete(limits = rev(unique(sort(dfwide$var))), labels=estimates) + ylab("") +
labs(col="Effects") + theme(legend.box.background = element_rect(),
legend.title=element_blank(), legend.key=element_blank(),legend.key.size = unit(0.15, "cm"),
legend.text=element_text(size=8), legend.position= c(0.78,0.88), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) #+
#xlab(expression(atop("Model Estimate of Change ", paste("in Duration of Vegetative Risk (days)"))))
quartz()
fig1
View(bb.nao)
View(bb)
summary(lm(space~elev, data=bb))
summary(lm(space~elev+species, data=bb))
summary(lm(space~elev+lat+long, data=bb))
aes<-subset(bb, species=="AESHIP")
aes<-subset(aes, year=1950)
aes<-subset(aes, year==1950)
View(aes)
bb$space<-round(bb$space, digits=4)
bb<-bb[!duplicated(bb),]
check<-bb[which(duplicated(bb$lat.long & bb$year & bb$species)),]
check<-bb[duplicated(bb[1:4]) | duplicated(bb[1:4], fromLast= TRUE),]
View(check)
bb$space<-round(bb$space, digits=2)
bb<-bb[!duplicated(bb),]
check<-bb[duplicated(bb[1:4]) | duplicated(bb[1:4], fromLast= TRUE),]
View(check)
bb$elev<-ave(bb$elev, bb$lat.long)
bb<-bb[!duplicated(bb),]
View(bb)
check<-bb[duplicated(bb[1:4]) | duplicated(bb[1:4], fromLast= TRUE),]
b<-read.csv("output/regrisk.cleaned.csv", header=TRUE)
write.csv(bb.stan, file="~/Documents/git/regionalrisk/analyses/output/bb.brm.nointer.csv", row.names = FALSE)
bb.stan<-bb
write.csv(bb.stan, file="~/Documents/git/regionalrisk/analyses/output/bb.brm.nointer.csv", row.names = FALSE)
write.csv(bb, file="~/Documents/git/regionalrisk/analyses/output/regrisk.cleaned.csv", row.names = FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
# Load Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
#library(egg)
#library(purrr)
#library(broom)
library(brms)
# Setting working directory
setwd("~/Documents/git/regionalrisk/analyses/")
bb<-read.csv("output/regrisk.cleaned.csv", header=TRUE)
#### Not separated by Species
bb.samp<-bb[sample(nrow(bb), 75576, replace=FALSE),]
#bb$fs.el<-round(bb$elev, digits=-1)
#bb$fs.el<-ave(bb$fs.count, bb$fs.el)
elev<-ggplot(bb.samp, aes(x=elev, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Elevation") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3"), legend.position = "none") +
coord_cartesian(xlim=c(0, 1800), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0)) + facet_wrap(~species)
#bb$fs.mat<-round(bb$sp.temp, digits=0)
#bb$fs.mat<-ave(bb$fs.count, bb$fs.mat)
mat<-ggplot(bb.samp, aes(x=sp.temp, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Mean Spring Temperature") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3")) +
coord_cartesian(xlim=c(-14, 15), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.n<-round(bb$m.index, digits=2)
#bb$fs.n<-ave(bb$fs.count, bb$fs.n)
nao<-ggplot(bb.samp, aes(x=m.index, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("NAO Index") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3"), legend.position = "none") +
coord_cartesian(xlim=c(-1.5, 0.75), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.sp<-round(bb$space, digits=-1)
#bb$fs.sp<-ave(bb$fs.count, bb$fs.sp)
space<-ggplot(bb.samp, aes(x=space, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Space") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3")) +
coord_cartesian(xlim=c(-50, 100), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
quartz()
ggarrange(elev, mat, nao, space, ncol=2, nrow=2)
library(egg)
ggarrange(elev, mat, nao, space, ncol=2, nrow=2)
#### Not separated by Species
bb.samp<-bb[sample(nrow(bb), 50000, replace=FALSE),]
#bb$fs.el<-round(bb$elev, digits=-1)
#bb$fs.el<-ave(bb$fs.count, bb$fs.el)
elev<-ggplot(bb.samp, aes(x=elev, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Elevation") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3"), legend.position = "none") +
coord_cartesian(xlim=c(0, 1800), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.mat<-round(bb$sp.temp, digits=0)
#bb$fs.mat<-ave(bb$fs.count, bb$fs.mat)
mat<-ggplot(bb.samp, aes(x=sp.temp, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Mean Spring Temperature") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3")) +
coord_cartesian(xlim=c(-14, 15), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.n<-round(bb$m.index, digits=2)
#bb$fs.n<-ave(bb$fs.count, bb$fs.n)
nao<-ggplot(bb.samp, aes(x=m.index, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("NAO Index") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3"), legend.position = "none") +
coord_cartesian(xlim=c(-1.5, 0.75), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.sp<-round(bb$space, digits=-1)
#bb$fs.sp<-ave(bb$fs.count, bb$fs.sp)
space<-ggplot(bb.samp, aes(x=space, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Space") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3")) +
coord_cartesian(xlim=c(-50, 100), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
quartz()
ggarrange(elev, mat, nao, space, ncol=2, nrow=2)
#### Not separated by Species
bb.samp<-bb[sample(nrow(bb), 7600, replace=FALSE),]
#bb$fs.el<-round(bb$elev, digits=-1)
#bb$fs.el<-ave(bb$fs.count, bb$fs.el)
elev<-ggplot(bb.samp, aes(x=elev, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Elevation") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3"), legend.position = "none") +
coord_cartesian(xlim=c(0, 1800), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.mat<-round(bb$sp.temp, digits=0)
#bb$fs.mat<-ave(bb$fs.count, bb$fs.mat)
mat<-ggplot(bb.samp, aes(x=sp.temp, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Mean Spring Temperature") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3")) +
coord_cartesian(xlim=c(-14, 15), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.n<-round(bb$m.index, digits=2)
#bb$fs.n<-ave(bb$fs.count, bb$fs.n)
nao<-ggplot(bb.samp, aes(x=m.index, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("NAO Index") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3"), legend.position = "none") +
coord_cartesian(xlim=c(-1.5, 0.75), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
#bb$fs.sp<-round(bb$space, digits=-1)
#bb$fs.sp<-ave(bb$fs.count, bb$fs.sp)
space<-ggplot(bb.samp, aes(x=space, y=fs.count)) + geom_line(aes(col=as.factor(cc)),stat="smooth",method="lm") + xlab("Space") + ylab("Average Number \n of False Springs") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.key=element_blank(),
plot.margin = unit(c(2,2,2,2), "lines"),
plot.title=element_text(colour = "firebrick3")) +
coord_cartesian(xlim=c(-50, 100), ylim=c(0, 9)) + scale_color_manual(values=c("red4", "blue3"), labels=c("Before 1983", "After 1983"), name="") +
geom_jitter(alpha=0.1, aes(shape=as.factor(cc))) +
scale_shape_manual(values=c(3, 5), labels=c("Before 1983", "After 1983"), name="") + guides(shape = guide_legend(override.aes = list(alpha=1))) +
scale_y_continuous(expand = c(0, 0))
quartz()
ggarrange(elev, mat, nao, space, ncol=2, nrow=2)
