stan_glm(fs~mat+sp+site, data=fake, family=poisson)
#mu= vector()
#pb <- txtProgressBar(min = 1, max = nrow(d), style = 3)
for (i in 1:nrow(d)){
a[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
fs[i] <-rpois(a, mu)
#setTxtProgressBar(pb, i)
}
a[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
sigma=vector()
#pb <- txtProgressBar(min = 1, max = nrow(d), style = 3)
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
fs[i] <-rpois(a[i], sigma[i])
#setTxtProgressBar(pb, i)
}
#pb <- txtProgressBar(min = 1, max = nrow(d), style = 3)
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
fs[i] <-rpois(a, sigma)
#setTxtProgressBar(pb, i)
}
sigma[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
sigma
#pb <- txtProgressBar(min = 1, max = nrow(d), style = 3)
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
fs <-rpois(a, sigma)
#setTxtProgressBar(pb, i)
}
fs
#pb <- txtProgressBar(min = 1, max = nrow(d), style = 3)
for (i in ntot){
sigma[i] <- rnorm(n = length(ntot) , m*mat[i] + spp*sp[i] + st*site[i], sd=s )
fs <-rpois(a[i], sigma[i])
#setTxtProgressBar(pb, i)
}
#pb <- txtProgressBar(min = 1, max = nrow(d), style = 3)
for (i in ntot){
sigma[i] <- rnorm(n = length(ntot) ,a + m*mat[i] + spp*sp[i] + st*site[i], sd=s )
#setTxtProgressBar(pb, i)
}
fs <-rpois(ntot, sigma)
mean(fs)
range(fs)
fake <- data_frame(fs, mat, sp, site)
fake$mat<-as.numeric(fake$mat)
fake$sp<-as.numeric(fake$sp)
fake$site<-as.numeric(fake$site)
stan_glm(fs~mat+sp+site, data=fake, family=poisson)
x = runif(ntot, min=0, max=12)
mu <-exp(m+spp+st * x)
fs<-rpois(ntot, log(mu))
fs
mean(fs)
range(fs)
fake <- data_frame(fs, mat, sp, site)
fake$mat<-as.numeric(fake$mat)
fake$sp<-as.numeric(fake$sp)
fake$site<-as.numeric(fake$site)
summary(lm(fs ~ mat+sp+site, data = fake)) # sanity check
stan_glm(fs~mat+sp+site, data=fake, family=poisson)
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Set up: 6 species, 30 years, 1000 lats and longs, two outcomes
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
nmat = 12
nsp = 6
nsite = 16
reps = 1
(ntot = nmat*nsp*nsite*ncc*reps)
mat = as.numeric(gl(nmat, reps, length=ntot))
sp = as.numeric(gl(nsp, reps*nmat, length = ntot))
site = as.numeric(gl(nsite, reps*nsp*nmat, length = ntot))
(d <- data.frame(mat, sp, site))
a = 2.5
m = 0.2
spp = 0.5
st = 0.1
s = 0.1
fs = rep(0,ntot)
for (i in ntot){
fs[i] <- as.integer(rnorm(n = length(ntot) ,mean=a + m*mat[i] + spp*sp[i] + st*site[i], sd=s ))
}
fake <- data_frame(fs, mat, sp, site)
fake
mean(fs)
for (i in ntot){
fs[i] <- rnorm(n = length(ntot) ,mean=a + m*mat[i] + spp*sp[i] + st*site[i], sd=s )
}
fake <- data_frame(fs, mat, sp, site)
fs
for (i in 1:nrow(d)){
fs[i] <- rnorm(n = length(ntot) ,mean=a + m*mat[i] + spp*sp[i] + st*site[i], sd=s )
}
fake <- data_frame(fs, mat, sp, site)
fs
for (i in 1:nrow(d)){
fs[i] <- as.integer(rnorm(n = length(ntot) ,mean=a + m*mat[i] + spp*sp[i] + st*site[i], sd=s ))
}
fake <- data_frame(fs, mat, sp, site)
fs
mean(fs)
range(fs)
fake$mat<-as.numeric(fake$mat)
fake$sp<-as.numeric(fake$sp)
fake$site<-as.numeric(fake$site)
summary(lm(fs ~ mat+sp+site, data = fake)) # sanity check
stan_glm(fs~mat+sp+site, data=fake, family=poisson)
sigma = vector()
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) ,mean=a + m*mat[i] + spp*sp[i] + st*site[i], sd=s )
}
fs<-rpois(nrow(d), sigma)
fs
mean(fs)
range(fs)
sigma = vector()
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) ,mean=a + m*mat[i] + spp*sp[i] + st*site[i], sd=s )
}
fs<-rpois(nrow(d), sigma)
fs
mean(fs)
sigma = vector()
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) ,m*mat[i] + spp*sp[i] + st*site[i], sd=s )
}
fs<-rpois(nrow(d), sigma)
fs
mean(fs)
range(fs)
fake <- data_frame(fs, mat, sp, site)
fake$mat<-as.numeric(fake$mat)
fake$sp<-as.numeric(fake$sp)
fake$site<-as.numeric(fake$site)
summary(lm(fs ~ mat+sp+site, data = fake)) # sanity check
stan_glm(fs~mat+sp+site, data=fake, family=poisson)
write.csv(fake, file="~/Documents/git/regionalrisk/analyses/output/fake_poisson.csv", row.names = FALSE)
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(dplyr)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/regionalrisk/analyses/")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
bb<-read.csv("output/fake_poisson.csv", header=TRUE)
mat.prepdata <-subset(bb, select=c("fs", "mat", "sp", "site"))
mat.stan <- mat.prepdata[complete.cases(mat.prepdata),]
#mat$fs = mat.stan$fs.num
fs = mat.stan$fs
mat = mat.stan$mat
sp = mat.stan$sp
site = mat.stan$site
#cc = mat.stan$cc
N = length(fs)
datalist.td <- list(fs=fs,mat=mat,sp=sp,site=site,N=N)
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
fake$ma<-log(fake$mat)
fake$spp<-log(fake$sp)
fake$st<-log(fake$site)
# Basic housekeeping
rm(list=ls())
options(stringsAsFactors=FALSE)
# Fake data for buburst stan work #
library(dplyr)
library(rstanarm)
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Set up: 6 species, 30 years, 1000 lats and longs, two outcomes
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
nmat = 12
nsp = 6
nsite = 16
reps = 1
(ntot = nmat*nsp*nsite*ncc*reps)
mat = as.numeric(gl(nmat, reps, length=ntot))
sp = as.numeric(gl(nsp, reps*nmat, length = ntot))
site = as.numeric(gl(nsite, reps*nsp*nmat, length = ntot))
(d <- data.frame(mat, sp, site))
a = 2.5
m = 0.2
spp = 0.5
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Set up: 6 species, 30 years, 1000 lats and longs, two outcomes
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
nmat = 12
nsp = 6
nsite = 16
reps = 1
(ntot = nmat*nsp*nsite*reps)
mat = as.numeric(gl(nmat, reps, length=ntot))
sp = as.numeric(gl(nsp, reps*nmat, length = ntot))
site = as.numeric(gl(nsite, reps*nsp*nmat, length = ntot))
(d <- data.frame(mat, sp, site))
a = 2.5
m = 0.2
spp = 0.5
st = 0.1
s = 0.5
fs = rep(0,ntot)
sigma = vector()
for (i in 1:nrow(d)){
sigma[i] <- rnorm(n = length(ntot) ,m*mat[i] + spp*sp[i] + st*site[i], sd=s )
}
fs<-rpois(nrow(d), sigma)
fake <- data_frame(fs, mat, sp, site)
fake$mat<-as.numeric(fake$mat)
fake$sp<-as.numeric(fake$sp)
fake$site<-as.numeric(fake$site)
summary(lm(fs ~ mat+sp+site, data = fake)) # sanity check
fake$ma<-log(fake$mat)
fake$spp<-log(fake$sp)
fake$st<-log(fake$site)
summary(lm(fs~ma+spp+st, data=fake, family=poisson))
stan_glm(fs~ma+spp+st, data=fake, family=poisson)
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(dplyr)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/regionalrisk/analyses/")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
bb<-read.csv("output/fake_poisson.csv", header=TRUE)
mat.prepdata <-subset(bb, select=c("fs", "mat", "sp", "site"))
mat.stan <- mat.prepdata[complete.cases(mat.prepdata),]
#mat$fs = mat.stan$fs.num
fs = mat.stan$fs
mat = log(mat.stan$mat)
sp = log(mat.stan$sp)
site = log(mat.stan$site)
#cc = mat.stan$cc
N = length(fs)
datalist.td <- list(fs=fs,mat=mat,sp=sp,site=site,N=N)
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
fs
mat
site
mat.stan
filter(fs<0)
tidyr::filter(fs<0)
library(tidyr)
filter(fs<0)
filter(mat.stan$fs<0)
fs[fs<0]
fs[(fs<0),]
fs[(fs<0)]
mat[(mat<0)]
site[(site<0)]
sp[(sp<0)]
sp[(sp>0)]
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
betas <- as.matrix(mat.td4, pars = c("mu_mat", "mu_sp", "mu_site", "mu_cc"))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4
plot(mat.td4, pars="b_sp", "b_mat", "b_site")
launch_shinystan(mat.td4)
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(dplyr)
library(tidyr)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/regionalrisk/analyses/")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb<-read.csv("output/fs_matspsite.csv", header=TRUE)
#bb$fs<-ifelse(bb$fs.count>=1, 1, 0)
bb$fs<-ave(bb$fs, bb$lat.long, bb$species, FUN=sum)
bb$sp<-as.numeric(as.factor(bb$species))
bb$mat<-ave(bb$mat, bb$lat.long)
#bb$site<-as.numeric(bb$site)
#bb$cc<-as.numeric(bb$cc)
bb$lat<-as.numeric(bb$lat)
bb$long<-as.numeric(bb$long)
bb<-bb%>%dplyr::select(lat.long, lat, long, mat, sp, fs)
bx<-bb[!duplicated(bb),]
## subsetting data, preparing genus variable, removing NAs
mat.prepdata <- subset(bx, select=c("fs", "mat", "sp", "lat", "long"))
mat.stan <- mat.prepdata[complete.cases(mat.prepdata),]
#mat$fs = mat.stan$fs.num
fs = mat.stan$fs
mat = log(mat.stan$mat)
sp = log(mat.stan$sp)
#site = log(mat.stan$site)
lat = log(mat.stan$lat)
lon = log(mat.stan$long)
lon = abs(log(mat.stan$long))
lon
lon = log(abs(mat.stan$long))
#cc = mat.stan$cc
N = length(fs)
# making a list out of the processed data. It will be input for the model
datalist.td <- list(fs=fs,mat=mat,sp=sp,lat=lat, lon=lon,N=N)
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat = log(abs(mat.stan$mat))
# making a list out of the processed data. It will be input for the model
datalist.td <- list(fs=fs,mat=mat,sp=sp,lat=lat, lon=lon,N=N)
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
#mat$fs = mat.stan$fs.num
fs = mat.stan$fs
mat = mat.stan$mat
sp = mat.stan$sp
#site = log(mat.stan$site)
lat = mat.stan$lat
lon = mat.stan$long
#cc = mat.stan$cc
N = length(fs)
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
lon[lon<0]
range(lon[lon<0])
range(mat[mat<0])
#mat$fs = mat.stan$fs.num
fs = mat.stan$fs
mat = log(mat.stan$mat+10)
sp = log(mat.stan$sp+10)
#site = log(mat.stan$site)
lat = log(mat.stan$lat+10)
lon = log(mat.stan$long+10)
#cc = mat.stan$cc
N = length(fs)
# making a list out of the processed data. It will be input for the model
datalist.td <- list(fs=fs,mat=mat,sp=sp,lat=lat, lon=lon,N=N)
mat.td4 = stan('scripts/space_fspoisson_nointer.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4
launch_shinystan(mat.td4)
plot(mat.td4, pars="b_sp", "b_mat", "b_lat", "b_lon")
plot(mat.td4, pars=c("mu_b_sp", "mu_b_mat", "mu_b_site", "mu_b_cc"))
plot(mat.td4, pars=c("sp", "mat", "lat","lon"))
plot(mat.td4, pars="b_sp", "b_mat", "b_lat", "b_lon")
betas <- as.matrix(mat.td4, pars = c("b_mat", "b_sp", "b_lat", "b_lon"))
mcmc_intervals(betas)
#pre<-bb%>%filter(year>1950)%>%filter(year<=1983)
pre<-bb
pre$fs<-ave(pre$fs, pre$PEP_ID, pre$species, FUN=sum)
pre$sp<-as.numeric(as.factor(pre$species))
pre$mat<-ave(pre$mat, pre$PEP_ID)
pre$lat<-as.numeric(pre$lat)
pre$long<-as.numeric(pre$long)
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(dplyr)
library(ape)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/regionalrisk/analyses/")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
#bb<-read.csv("output/smfake_mat.csv", header=TRUE)
bb<-read.csv("output/fs_matspsite.csv", header=TRUE)
#pre<-bb%>%filter(year>1950)%>%filter(year<=1983)
pre<-bb
pre$fs<-ave(pre$fs, pre$PEP_ID, pre$species, FUN=sum)
pre$sp<-as.numeric(as.factor(pre$species))
pre$mat<-ave(pre$mat, pre$PEP_ID)
pre$lat<-as.numeric(pre$lat)
pre$long<-as.numeric(pre$long)
pre<-pre%>%dplyr::select(lat.long, lat, long, mat, sp, fs)
pre.bx<-pre[!duplicated(pre),]
## subsetting data, preparing genus variable, removing NAs
pre.mat.prepdata <- subset(pre.bx, select=c("fs", "mat", "sp", "lat", "long"))
pre.mat.stan <- pre.mat.prepdata[complete.cases(pre.mat.prepdata),]
######### Plotting time! ##########
df<-pre.mat.stan
df$fs.num<-ave(df$fs, df$sp)
df$fs.sd<-ave(df$fs, df$sp, FUN=sd)
df$sp<-ifelse(df$sp==1, "A.hippocastanum", df$sp)
df$sp<-ifelse(df$sp==2, "A.glutinosa", df$sp)
df$sp<-ifelse(df$sp==3, "B.pendula", df$sp)
df$sp<-ifelse(df$sp==4, "F.sylvatica", df$sp)
df$sp<-ifelse(df$sp==5, "F.excelsior", df$sp)
df$sp<-ifelse(df$sp==6, "Q.robar", df$sp)
dx<-df%>%dplyr::select(-fs, -mat, -lat, -long)
dx<-dx[!duplicated(dx),]
df$latr<-round(df$lat, digits=2)
df$fs.lat<-ave(df$fs, df$latr)
dl<-df%>%dplyr::select(fs.lat, latr, sp )
dl<-dl[!duplicated(dl),]
dl$latr<-as.numeric(dl$latr)
lat.spp<-ggplot(dl, aes(latr, fs.lat)) + xlab("Latitude") +
ylab("Number of False Springs")  + geom_point(col=sp) + geom_smooth(aes(col=as.factor(sp)),method="loess", se=FALSE) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key=element_blank())
lat.spp<-ggplot(dl, aes(latr, fs.lat)) + xlab("Latitude") +
lat.spp<-ggplot(dl, aes(latr, fs.lat)) + xlab("Latitude") +
ylab("Number of False Springs")  + geom_point(aes(col=as.factor(sp))) + geom_smooth(aes(col=as.factor(sp)),method="loess", se=FALSE) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key=element_blank())
lat.spp<-ggplot(dl, aes(latr, fs.lat)) + xlab("Latitude") +
ylab("Number of False Springs")  + geom_point(aes(col=as.factor(sp))) + geom_smooth(aes(col=as.factor(sp)),method="loess", se=FALSE) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key=element_blank())
plot(lat.spp)
lat.spp<-ggplot(dl, aes(latr, fs.lat)) + xlab("Latitude") +
ylab("Number of False Springs")  + geom_point(aes(col=as.factor(sp))) + geom_smooth(aes(col=as.factor(sp)),method="lm", se=FALSE) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key=element_blank())
plot(lat.spp)
