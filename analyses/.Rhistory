# Clear workspace
rm(xlist=ls()) # remove everything currently held in the R memory
# Clear workspace
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Set Working directory
setwd("~/Documents/git/fieldfreezing/analyses")
d<-read.csv("input/Exp_taggedHF.csv", header=TRUE)
d$species<-substr(d$ind, 3,8)
d$number<-substr(d$ind, 12, 13)
d$stage<-substr(d$ind, 0,1)
d$sp_stage<-substr(d$ind, 0,8)
count<-as.data.frame(table(d$sp_stage))
count<-count%>%
rename(ind=Var1)%>%
rename(number=Freq)
d<-d[!duplicated(d$ind), ]
View(d)
View(count)
cc<-filter(count, number>=16)
cc
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(betareg)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/regionalrisk/analyses/")
source('scripts/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
bb<-read.csv("output/fake_mat.csv", header=TRUE)
## subsetting data, preparing genus variable, removing NAs
mat.prepdata <- subset(bb, select=c("fs", "mat", "sp", "site", "cc")) # removed "sp" when doing just one species
mat.stan <- mat.prepdata[complete.cases(mat.prepdata),]
fs = mat.stan$fs
mat = mat.stan$mat
sp = mat.stan$sp
site = mat.stan$site
cc = mat.stan$cc
N = length(mat.stan$fs)
# making a list out of the processed data. It will be input for the model
datalist.td <- list(x=x,fs=fs,mat=mat,sp=sp,site=site,cc=cc,N=N)
# making a list out of the processed data. It will be input for the model
datalist.td <- list(fs=fs,mat=mat,sp=sp,site=site,cc=cc,N=N)
mat.td4 = stan('scripts/gp_fsmat.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/gp_fsmat.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/gp_fsmat.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/fs_matspsite.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
View(datalist.td)
N = length(mat.stan)
# making a list out of the processed data. It will be input for the model
datalist.td <- list(fs=fs,mat=mat,sp=sp,site=site,cc=cc,N=N)
View(datalist.td)
mat.td4 = stan('scripts/fs_matspsite.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/fs_matspsite.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/fs_matspsite.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
mat.td4 = stan('scripts/fs_matspsite.stan', data = datalist.td,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99))
detach("package:rstan", unload=TRUE)
install.packages("rstan")
install.packages(c("Rcpp", "rstan", "rstanarm", "rstantools"))
install.packages(c("Rcpp", "rstan", "rstanarm", "rstantools"))
install.packages(c("Rcpp", "rstan", "rstanarm", "rstantools"))
remove.packages("rstan", "rstanarm", "Rcpp", "rstantools")
remove.packages("rstan", "rstanarm")
install.packages(c("Rcpp", "rstan", "rstanarm", "rstantools"))
install.packages("rstan")
