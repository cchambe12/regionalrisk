bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb<-bb[sample(nrow(bb), 8000), ]
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 4500, warmup=2000, thin=10,
prior = prior(cauchy(0,13)))
require(rstan)
require(brms)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
require(rstan)
require(brms)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
library(lme4)
logs<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=binomial(link="logit"))
logs
summary(logs)
poisbase<-glm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=poisson(link="log"))
summary(poisbase)
poisnodist<-glm(fs.count ~ nao.z + mat.z + space.z + elev.z +
cc.z + species +
mat.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=poisson(link="log"))
summary(poisnodist);summary(poisbase)
bb<-bb[sample(nrow(bb), 800), ]
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 5000, warmup=2500,
prior = prior(normal(-10,10), class=b), prior(normal(-5,5), class="Intercept"))
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 5000, warmup=2500,
prior = prior(normal(-10,10), class=b), prior(normal(-5,5), coef="Intercept"))
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 5000, warmup=2500,
prior = prior(normal(-10,10), class=b), prior(normal(-5,5), class=b, coef="Intercept"))
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 5000, warmup=2500,
prior = prior(normal(-10,10), class=b))
pois.test
hist(bb$nao.z)
hist(bb$mat.z)
hist(bb$space.z)
hist(bb$elev.z)
hist(bb$cc.z)
require(rstan)
require(brms)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb<-bb[sample(nrow(bb), 15000), ]
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 4000, warmup=2500,
prior = prior(normal(-6,6), class=b))
poisbase<-glm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=negative.binomial())
poisbase<-glm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=negative.binomial(theta=2))
summary(poisbase)
poisbase<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=negative.binomial(theta=2))
summary(poisbase)
poisbase<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=quasibinomial())
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
poisbase<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=quasibinomial())
summary(poisbase)
bet <- read.csv("~/Documents/git/ospree/analyses/bb_analysis/PEP_climate/input/bbch_betpen.csv")
head(bet)
rm(list=ls())
options(stringsAsFactors=FALSE)
library(brms)
load("/Users/catchamberlain/Downloads/orig_full_itrxns.Rdata")
check <- brms:extract_draws(orig.full, re_formula=c("cc.z", "elev.z", "species"))
check <- brms::extract_draws(orig.full, re_formula=c("cc.z", "elev.z", "species"))
check <- brms::extract_draws(orig.full)
View(check)
varies <- get_variables(orig.full)
library(broom)
varies <- get_variables(orig.full)
library(tidybayes)
install.packages("tidybayes")
varies <- get_variables(orig.full)
library(tidybayes)
varies <- get_variables(orig.full)
varies <- gsub(".*b_","",varies)
conds <- r_conditions[speciesBETPEN, mat.z]
conds <- r_condition[speciesBETPEN, mat.z]
check <- orig.full %>%
spread_draws(species[elev.z, cc.z, term])
library(dplyr)
check <- orig.full %>%
spread_draws(species[elev.z, cc.z, term])
varies <- get_variables(orig.full)
varies
check <- orig.full %>%
spread_draws(b_speciesBETPEN[elev.z, cc.z, term]) %>%
spread_draws(b_speciesFRAEXC[elev.z, cc.z, term])
check <- orig.full %>%
spread_draws(b_speciesBETPEN[elev.z, term]) %>%
spread_draws(b_speciesFRAEXC[elev.z, term])
check <- orig.full %>%
spread_draws(b_elev.z[condition, term]) %>%
spread_draws(b_cc.z[condition, term])
check <- orig.full %>%
add_fitted_draws()
check <- add_fitted_draws(orig.full)
check <- bb %>% add_fitted_draws(orig.full)
View(check)
head(check)
check <- bb %>% add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
dplyr::select(species, cc, elev)
check <- bb %>% add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN"))
unique(check$species)
foo <- ungroup(check) %>%
dplyr::select(species, cc, elev)
View(foo)
foo <- foo[!duplicated(foo),]
colnames(check)
foo <- ungroup(check) %>%
dplyr::select(species, cc, elev, .value)
foo <- foo[!duplicated(foo),]
View(foo)
ggplot(foo, aes(x=elev, y=.value, col=species, alpha=cc)) + geom_line()
ggplot(foo, aes(x=elev, y=.value, col=species, alpha=as.factor(cc))) + geom_line(aes(col=species, alpha=as.factor(cc)), stat="smooth", method="lm")
goober <- posterior_interval(orig.full, prob=0.5)
View(goober)
check <- bb %>% add_fitted_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
colnames(check)
ggplot(foo, aes(x=elev, y=.value, col=species, alpha=as.factor(cc))) + geom_line(aes(col=species, alpha=as.factor(cc)),
stat="smooth", method="lm", se=TRUE, span=0.5)
ggplot(foo, aes(x=elev, y=.value, col=species, line_type=as.factor(cc))) + geom_line(aes(col=species, line_type=as.factor(cc)),
stat="smooth", method="lm", se=TRUE, span=0.5)
ggplot(foo, aes(x=elev, y=.value, col=species, linetype=as.factor(cc))) + geom_line(aes(col=species, linetype=as.factor(cc)),
stat="smooth", method="lm", se=TRUE, span=0.5)
list_of_draws <- extract(orig.full)
## Libraries
library(rstan)
list_of_draws <- extract(orig.full)
load("/Users/catchamberlain/Downloads/orig_full_itrxns.Rdata")
list_of_draws <- extract(orig.full)
list_of_draws <- extract_fit(orig.full)
list_of_draws <- brms::extract_fit(orig.full)
library(brms)
list_of_draws <- brms::extract_fit(orig.full)
list_of_draws <- brms::extract_draws(orig.full)
print(names(list_of_draws))
gather <- bb %>% gather_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
library(dplyr)
gather <- bb %>% gather_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
library(tidybayes)
library(broom)
gather <- bb %>% gather_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
gather <- orig.full %>% gather_draws(elev.z, cc.z, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
gather <- orig.full %>% gather_draws(`b_elev.z`, `b_cc.z`, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
gather <- orig.full %>% gather_draws(b_elev.z, b_cc.z, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
check <- bb %>% add_fitted_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
foo <- ungroup(check) %>%
dplyr::select(species, cc, elev, .value)
bb %>%
data_grid(elev) %>%
add_fitted_draws(orig.full) %>%
ggplot(aes(x = .value, y = elev)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
ggplot(aes(x = .value, y = elev)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(check$species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, group=cc)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, group=cc, col=species)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, linetype=as.factor(cc), col=species)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, linetype=as.factor(cc), col=species)) +
geom_line(.width = c(.25, .75), aes(col=species, linetype=as.factor(cc)),
stat="smooth", method="lm")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(rgdal)
library(maptools)
library(rgeos)
library(ggmap)
library(ggplot2)
library(arm)
# Set working directory
setwd("~/Documents/git/regionalrisk/analyses")
land<-readShapeSpatial("input/natural_earth_vector/50m_physical/ne_50m_land.shp") ##
boundars<-readShapeSpatial("input/natural_earth_vector/50m_cultural/ne_50m_admin_0_countries.shp")
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/analyses/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("~/Documents/GitHub/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
use.chillports = TRUE# change to false for using utah instead of chill portions (most models use chill portions z)
use.zscore = FALSE # change to false to use raw predictors
# Default is species complex and no crops
use.allspp = FALSE
use.multcuespp = FALSE
use.cropspp = FALSE
# Default is species complex use  alltypes of designs
use.expramptypes.fp = TRUE
use.exptypes.fp = FALSE
#Default is all chilling data
use.expchillonly = FALSE # change to true for only experimental chilling
#note: with only exp chilling, there is only exp photo and force too.
#also: subsetting to exp chill only reduces dataset to 3 species, <9 studies
source("source/bbstanleadin.R")
bb.wlat <- bb.stan
bb.wlat <- within(bb.wlat, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
bb.wlat <- subset(bb.wlat, bb.wlat$prov.lat>1)
lat.stan<-bb.wlat
lat.stan<-subset(lat.stan, lat.stan$resp<600)
lat.stan$lat <- lat.stan$provenance.lat
lat.stan$complex<-as.numeric(as.factor(lat.stan$complex.wname))
lat.stan<-na.omit(lat.stan)
longs<-subset(bb.resp, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
d<-full_join(lat.stan, longs)
## Mapping
all.spp<-ggplot() +
geom_polygon(data=land, aes(long,lat,group=group), fill="white")+
geom_path(data=boundars, aes(long,lat, group=group), color="light grey",
size=0.1) +
geom_point(data=d, aes(provenance.long, provenance.lat, col=complex.wname)) +
#scale_size(range=c(1,7), guide = "legend",labs(size="Count")) +
#coord_cartesian(xlim = c(-5, 35), ylim = c(30,70)) +
theme(aspect.ratio=1)
#land<-readShapeSpatial("input/natural_earth_vector/50m_physical/ne_50m_land.shp") ##
boundars<-readShapeSpatial("input/natural_earth_vector/50m_cultural/ne_50m_admin_0_countries.shp")
library(raster)
# Set working directory
setwd("~/Documents/git/regionalrisk/analyses")
#land<-readShapeSpatial("input/natural_earth_vector/50m_physical/ne_50m_land.shp") ##
boundars<-readShapeSpatial("input/natural_earth_vector/50m_cultural/ne_50m_admin_0_countries.shp")
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(maps)
library(grid)
library(gridExtra)
library(maptools)
library(ggplotify)
install.packages(c("maptools", "ggplotify"))
# Set working directory
setwd("~/Documents/git/regionalrisk/analyses")
#land<-readShapeSpatial("input/natural_earth_vector/50m_physical/ne_50m_land.shp") ##
boundars<-readShapeSpatial("input/natural_earth_vector/50m_cultural/ne_50m_admin_0_countries.shp")
library(maptools)
library(ggplotify)
#land<-readShapeSpatial("input/natural_earth_vector/50m_physical/ne_50m_land.shp") ##
boundars<-readShapeSpatial("input/natural_earth_vector/50m_cultural/ne_50m_admin_0_countries.shp")
## Mapping
mapWorld<-fortify(boundars)
## Mapping
mapWorld<-fortify(boundars)
quartz()
mp <- ggplot() +
geom_polygon(aes(x = mapWorld$long, y = mapWorld$lat, group = mapWorld$group),
color = 'gray', fill="lightgrey", size = .2) +
geom_jitter(width=1.5,aes(x=d$provenance.long, y=d$provenance.lat, color=d$complex.wname)) + theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
legend.position=c(0.075, 0.163),
#legend.position = "none",
legend.key = element_rect(fill="white", color="white"),
legend.box.background = element_rect(fill="white"),legend.text = element_text(size=7), legend.key.size = unit(0.3,"cm"),
legend.title = element_text(size=8))+
guides(color=FALSE, shape=FALSE)  +
scale_colour_manual(name="DatasetID", values=my.pal,
labels=sort(unique(sp$datasetID))) + scale_shape_manual(name="DatasetID", values=my.pch, labels=sort(unique(sp$datasetID))) +
scale_size_manual(values=c(1,2,3,4,5,6), labels = c("1-5","6-10","11-20","21-30","31-100",">100"), name="Number of Species") +
xlab("") + ylab("") + coord_cartesian(xlim=c(-125, 190), ylim=c(-55, 100))
my.pal<-rep(brewer.pal(n=12, name="Set3"),7)
my.pch<-rep(c(4,6,8), each=12)
mp <- ggplot() +
geom_polygon(aes(x = mapWorld$long, y = mapWorld$lat, group = mapWorld$group),
color = 'gray', fill="lightgrey", size = .2) +
geom_jitter(width=1.5,aes(x=d$provenance.long, y=d$provenance.lat, color=d$complex.wname, shape=d$complex.wname)) + theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
legend.position=c(0.075, 0.163),
#legend.position = "none",
legend.key = element_rect(fill="white", color="white"),
legend.box.background = element_rect(fill="white"),legend.text = element_text(size=7), legend.key.size = unit(0.3,"cm"),
legend.title = element_text(size=8))+
guides(color=FALSE, shape=FALSE)  +
scale_colour_manual(name="Species", values=my.pal,
labels=sort(unique(d$complex.wname))) + scale_shape_manual(name="Species", values=my.pch, labels=sort(unique(d$complex.wname))) +
xlab("") + ylab("") + coord_cartesian(xlim=c(-125, 190), ylim=c(-55, 100))
mp
sort(unique(d$complex.wname))
mp <- ggplot() +
geom_polygon(aes(x = mapWorld$long, y = mapWorld$lat, group = mapWorld$group),
color = 'gray', fill="lightgrey", size = .2) +
geom_jitter(width=1.5,aes(x=d$provenance.long, y=d$provenance.lat, color=d$complex.wname, shape=d$complex.wname)) + theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
legend.position=c(0.075, 0.163),
#legend.position = "none",
legend.key = element_rect(fill="white", color="white"),
legend.box.background = element_rect(fill="white"),legend.text = element_text(size=7), legend.key.size = unit(0.3,"cm"),
legend.title = element_text(size=8))+
#guides(color=FALSE, shape=FALSE)  +
scale_colour_manual(name="Species", values=my.pal,
labels=sort(unique(d$complex.wname))) + scale_shape_manual(name="Species", values=my.pch, labels=sort(unique(d$complex.wname))) +
xlab("") + ylab("") + coord_cartesian(xlim=c(-125, 190), ylim=c(-55, 100))
mp
mp <- ggplot() +
geom_polygon(aes(x = mapWorld$long, y = mapWorld$lat, group = mapWorld$group),
color = 'gray', fill="lightgrey", size = .2) +
geom_jitter(width=1.5,aes(x=d$provenance.long, y=d$provenance.lat, color=d$complex.wname, shape=d$complex.wname)) + theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
legend.position=c(0.075, 0.163),
#legend.position = "none",
legend.key = element_rect(fill="white", color="white"),
legend.box.background = element_rect(fill="white"),legend.text = element_text(size=7), legend.key.size = unit(0.3,"cm"),
legend.title = element_text(size=8))+
#guides(color=FALSE, shape=FALSE)  +
scale_colour_manual(name="Species", values=my.pal,
labels=sort(unique(d$complex.wname))) + scale_shape_manual(name="Species", values=my.pch, labels=sort(unique(d$complex.wname))) +
xlab("") + ylab("") + coord_cartesian(xlim=c(-125, 50), ylim=c(25, 100))
mp
View(d)
colnames(bb.stan)
longs<-subset(bb.all, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
colnames(bb.all)
longs<-subset(bb.noNA, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
d<-full_join(lat.stan, longs)
mp <- ggplot() +
geom_polygon(aes(x = mapWorld$long, y = mapWorld$lat, group = mapWorld$group),
color = 'gray', fill="lightgrey", size = .2) +
geom_jitter(width=1.5,aes(x=d$provenance.long, y=d$provenance.lat, color=d$complex.wname, shape=d$complex.wname)) + theme_classic() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
legend.position=c(0.075, 0.163),
#legend.position = "none",
legend.key = element_rect(fill="white", color="white"),
legend.box.background = element_rect(fill="white"),legend.text = element_text(size=7), legend.key.size = unit(0.3,"cm"),
legend.title = element_text(size=8))+
#guides(color=FALSE, shape=FALSE)  +
scale_colour_manual(name="Species", values=my.pal,
labels=sort(unique(d$complex.wname))) + scale_shape_manual(name="Species", values=my.pch, labels=sort(unique(d$complex.wname))) +
xlab("") + ylab("") + coord_cartesian(xlim=c(-125, 50), ylim=c(25, 100))
mp
View(d)
lats <- subset(lat.stan, select=c("datasetID", "genus", "species", "provenance.lat",
"resp", "force", "photo", "chill", "complex.wname"))
longs<-subset(bb.noNA, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
d<-full_join(lat.stan, longs)
d<-full_join(lats, longs)
lats <- subset(lat.stan, select=c("datasetID", "genus", "species", "provenance.lat",
"resp", "force", "photo", "chill"))
longs<-subset(bb.noNA, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
d<-full_join(lats, longs)
foo <- cbind(d, lat.stan$complex.wname)
lats <- subset(lat.stan, select=c("datasetID", "genus", "species", "provenance.lat",
"resp", "force", "photo", "chill"))
longs<-subset(bb.noNA, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
d<-full_join(lats, longs)
foo <- cbind(d, lat.stan$complex.wname)
d <- d[!duplicated(d),]
lats <- subset(lat.stan, select=c("datasetID", "genus", "species", "provenance.lat",
"resp", "force", "photo", "chill", "complex.wname"))
foo <- cbind(lat.stan, bb.noNA$provenance.long)
foo <- inner_join(lats, longs)
foo <- full_join(lats, longs)
View(foo)
foo <- foo[!is.na(foo$provenance.long),]
View(foo)
foo <- foo[!duplicated(foo),]
View(foo)
foo <- foo[!is.na(foo$complex.wname),]
lats <- subset(lat.stan, select=c("datasetID", "genus", "species", "provenance.lat",
"resp", "force", "photo", "chill"))
longs<-subset(bb.noNA, select=c("datasetID", "genus", "species", "provenance.lat", "resp",
"force", "photo", "chill", "provenance.long"))
foo <- full_join(lats, longs)
foo <- foo[!is.na(foo$provenance.long),]
foo <- full_join(foo, lat.stan)
View(foo)
goo <- na.omit(foo)
View(goo)
colnames(bb.resp)
