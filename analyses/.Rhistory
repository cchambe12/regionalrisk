rm(list=ls())
options(stringsAsFactors = FALSE)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
dev.off()
## Load libraries
library(ggplot2)
library(rethinking)
# Load the data
data(foxes)
foxes <- foxes
# Start with 5H1 since it leads into 5H2 and 5H3
### Linear model with territory size
mod.terr <- map(
alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_terr*area,
intercept ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.terr)
terr.seq <- seq(1,6,0.1)
mu.modterr <- link(mod.terr, data=list(area=terr.seq))
mu.modterr.mean <- apply(mu.modterr, 2, mean)
mu.modterr.PI <- apply(mu.modterr, 2, PI, .89)
plot(weight~area, foxes, col='red')
lines(terr.seq, mu.modterr.mean, col='black')
shade(mu.modterr.PI, terr.seq)
plot(precis(mod.terr))
abline(v=0, col="gray", lty=3, lwd=3)
# Let's check out group size now, in the exact same way as above...
mod.group <- map(
alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.group)
group.seq <- seq(1,9,0.1)
mu.modgroup <- link(mod.group, data=list(groupsize=group.seq))
mu.modgroup.mean <- apply(mu.modgroup, 2, mean)
mu.modgroup.PI <- apply(mu.modgroup, 2, PI, .89)
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mu.modgroup.mean, col='black')
shade(mu.modgroup.PI, group.seq)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
par(mfrow=c(1,2))
plot(precis(mod.terr))
abline(v=0, col="gray", lty=3, lwd=3)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
dev.off()
par(mfrow=c(1,2))
plot(precis(mod.terr))
abline(v=0, col="gray", lty=3, lwd=3)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.both)
## Okay, now we'll plot territory size while keeping group size constant
mod.both.terr <- link(mod.both, data=data.frame(groupsize=mean(foxes$groupsize), area=terr.seq))
mod.both.terr.mean <- apply(mod.both.terr, 2, mean)
mod.both.terr.PI <- apply(mod.both.terr, 2, PI, .89)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
dev.off()
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.both)
## Okay, now we'll plot territory size while keeping group size constant
mod.both.terr <- link(mod.both, data=data.frame(groupsize=mean(foxes$groupsize), area=terr.seq))
mod.both.terr.mean <- apply(mod.both.terr, 2, mean)
mod.both.terr.PI <- apply(mod.both.terr, 2, PI, .89)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
shade(mod.both.terr.PI, terr.seq, col = col.alpha("blue",0.5))
# Now we'll plot groupsize while keeping territory size constant
mod.both.group <- link(mod.both, data=data.frame(area=mean(foxes$area), groupsize=group.seq))
mod.both.group.mean <- apply(mod.both.group, 2, mean)
mod.both.group.PI <- apply(mod.both.group, 2, PI, .89)
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.both.group.mean, col='blue')
shade(mod.both.group.PI, group.seq, col = col.alpha("blue",0.5))
par(mfrow=c(1,3))
plot(precis(mod.both))
abline(v=0, col="gray", lty=3, lwd=3)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
shade(mod.both.terr.PI, terr.seq, col = col.alpha("blue",0.5))
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.both.group.mean, col='blue')
shade(mod.both.group.PI, group.seq, col = col.alpha("blue",0.5))
## Answering Questions from Chapter 5 & 6 in Rethinking
# Questions assigned: 5H2-3 and 6M5-6
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
dev.off()
## Load libraries
library(ggplot2)
library(rethinking)
# Load the data
data(foxes)
foxes <- foxes
# Start with 5H1 since it leads into 5H2 and 5H3
### Linear model with territory size
mod.terr <- map(
alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_terr*area,
intercept ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.terr)
terr.seq <- seq(1,6,0.1)
mu.modterr <- link(mod.terr, data=list(area=terr.seq))
mu.modterr.mean <- apply(mu.modterr, 2, mean)
mu.modterr.PI <- apply(mu.modterr, 2, PI, .89)
plot(weight~area, foxes, col='red')
lines(terr.seq, mu.modterr.mean, col='black')
shade(mu.modterr.PI, terr.seq)
plot(precis(mod.terr))
abline(v=0, col="gray", lty=3, lwd=3)
### SO AREA IS NOT VERY IMPORTANT IN PREDICTING FOX WEIGHT!
# Let's check out group size now, in the exact same way as above...
mod.group <- map(
alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.group)
group.seq <- seq(1,9,0.1)
mu.modgroup <- link(mod.group, data=list(groupsize=group.seq))
mu.modgroup.mean <- apply(mu.modgroup, 2, mean)
mu.modgroup.PI <- apply(mu.modgroup, 2, PI, .89)
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mu.modgroup.mean, col='black')
shade(mu.modgroup.PI, group.seq)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
### AND NEITHER IS GROUP SIZE BUT SLIGHTLY MORE THAN TERRITORY SIZE... INTERESTING!
par(mfrow=c(1,2))
plot(precis(mod.terr))
abline(v=0, col="gray", lty=3, lwd=3)
plot(precis(mod.group))
abline(v=0, col="gray", lty=3, lwd=3)
dev.off()
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.both)
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu = intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
########################## 5H2 ################################
# Alright, now for the good stuff!
mod.both <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.both)
## Okay, now we'll plot territory size while keeping group size constant
mod.both.terr <- link(mod.both, data=data.frame(groupsize=mean(foxes$groupsize), area=terr.seq))
mod.both.terr.mean <- apply(mod.both.terr, 2, mean)
mod.both.terr.PI <- apply(mod.both.terr, 2, PI, .89)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
shade(mod.both.terr.PI, terr.seq, col = col.alpha("blue",0.5))
# Now we'll plot groupsize while keeping territory size constant
mod.both.group <- link(mod.both, data=data.frame(area=mean(foxes$area), groupsize=group.seq))
mod.both.group.mean <- apply(mod.both.group, 2, mean)
mod.both.group.PI <- apply(mod.both.group, 2, PI, .89)
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.both.group.mean, col='blue')
shade(mod.both.group.PI, group.seq, col = col.alpha("blue",0.5))
par(mfrow=c(1,3))
plot(precis(mod.both))
abline(v=0, col="gray", lty=3, lwd=3)
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.both.terr.mean, col='blue')
shade(mod.both.terr.PI, terr.seq, col = col.alpha("blue",0.5))
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.both.group.mean, col='blue')
shade(mod.both.group.PI, group.seq, col = col.alpha("blue",0.5))
dev.off()
########################## 5H3 ################################
# So we start with body size as an additive function of avgfood and groupsize, per Richard's request
mod.foodgroup <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_food*avgfood,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.foodgroup)
## And now all three!
mod.all <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_terr*area + b_food*avgfood,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.all)
mod.all.group <- link(mod.all, data=data.frame(area=mean(foxes$area), avgfood=mean(foxes$avgfood), groupsize=group.seq))
mod.all.group.mean <- apply(mod.all.group, 2, mean)
mod.all.group.PI <- apply(mod.all.group, 2, PI, .89)
food.seq <- seq(0,1.5,0.1)
mod.all.food <- link(mod.all, data=data.frame(area=mean(foxes$area), groupsize=mean(foxes$groupsize), avgfood=food.seq))
mod.all.food.mean <- apply(mod.all.food, 2, mean)
mod.all.food.PI <- apply(mod.all.food, 2, PI, .89)
mod.all.area <- link(mod.all, data=data.frame(avgfood=mean(foxes$avgfood), groupsize=mean(foxes$groupsize), area=terr.seq))
mod.all.area.mean <- apply(mod.all.area, 2, mean)
mod.all.area.PI <- apply(mod.all.area, 2, PI, .89)
par(mfrow=c(2,3))
plot.new()
plot(precis(mod.all))
abline(v=0, col="gray", lty=2, lwd=3)
plot.new()
plot(weight~groupsize, foxes, col='red')
lines(group.seq, mod.all.group.mean, col='blue')
shade(mod.all.group.PI, group.seq, col = col.alpha("blue",0.5))
plot(weight~avgfood, foxes, col='red')
lines(food.seq, mod.all.food.mean, col='blue')
shade(mod.all.food.PI, food.seq, col = col.alpha("blue",0.5))
plot(weight~area, foxes, col='red')
lines(terr.seq, mod.all.area.mean, col='blue')
shade(mod.all.area.PI, terr.seq, col = col.alpha("blue",0.5))
plot(groupsize ~ area, data=foxes)
dev.off()
plot(groupsize ~ area, data=foxes)
## and then we look at average food variable
par(mfrow=c(1, 3))
plot(groupsize ~ area, data=foxes)
plot(groupsize ~ avgfood, data=foxes)
plot(avgfood ~ area, data=foxes)
mod.foodarea <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_terr*area + b_food*avgfood,
intercept ~ dnorm(0,10),
b_terr ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.foodarea)
########################## 5H3 ################################
# So we start with body size as an additive function of avgfood and groupsize, per Richard's request
mod.foodgroup <- map(alist(
weight ~ dnorm(mu , sigma),
mu <- intercept + b_group*groupsize + b_food*avgfood,
intercept ~ dnorm(0,10),
b_group ~ dnorm(0,10),
b_food ~ dnorm(0,10),
sigma ~ dunif(0,5)
),
data=foxes
)
precis(mod.foodgroup)
df <- read.csv("~/Documents/git/ospree/analyses/output/ospree_clean.csv")
sort(unique(df$respvar))
budset <- df[(df$respvar=="daystobudset"),]
budset <- df[(df$respvar=="percentbudburst_dormancy"),]
View(budset)
## Load library
library(MASS)
library(rethinking)
## Load data
data(eagles)
dat <- eagles
## Convert letters to numbers
dat$P <- ifelse(dat$P == "S", 0, 1)
dat$A <- ifelse(dat$A == "I", 0, 1)
dat$V <- ifelse(dat$V == "S", 0, 1)
## Create proportion column
dat$prop <- dat$y / dat$n
## Inspect
head(dat)
## Model 1
m.eagles <- map2stan(
alist(
y ~ dbinom(n, p),
logit(p)  <-  a + bp * P + bv * V + ba * A,
a ~ dnorm(0, 10),
bp ~ dnorm(0, 5),
bv ~ dnorm(0, 5),
ba ~ dnorm(0, 5)
),
data = dat, iter = 4000, chains = 4)
## Obtain estimates
precis(m.eagles)
## Compare to previous model
compare(m.eagles, m2.eagles)
## Plot model predictions
dat.pred <- expand.grid(P = c(0, 1), A = c(0, 1), V = c(0, 1))
link.m.eagles <- link(m.eagles, data = dat.pred)
pred.p <- apply(link.m.eagles, 2, mean)
pred.p.HPDI <- apply(link.m.eagles, 2, HPDI, prob = .89)
par(mfrow = c(1, 2)) # will be adding another plot later
plot(0, 0, type = "n", xlab = "Pirate/Adult/Victim", ylab = "Success probability",
ylim = c(0, 1), xlim = c(1, 8), xaxt = "n", main = "m.eagles")
axis(1, at = 1:8, labels = c("0/0/0", "1/0/0", "0/1/0", "1/1/0", "0/0/1", "1/0/1", "0/1/1", "1/1/1"))
p <- by(dat$prop,
list(dat$P, dat$A, dat$V), mean)
## Plot model predictions
dat.pred <- expand.grid(P = c(0, 1), A = c(0, 1), V = c(0, 1))
link.m.eagles <- link(m.eagles, data = dat.pred)
pred.p <- apply(link.m.eagles, 2, mean)
pred.p.HPDI <- apply(link.m.eagles, 2, HPDI, prob = .89)
par(mfrow = c(1, 2)) # will be adding another plot later
plot(0, 0, type = "n", xlab = "Pirate/Adult/Victim", ylab = "Success probability",
ylim = c(0, 1), xlim = c(1, 8), xaxt = "n", main = "m.eagles")
axis(1, at = 1:8, labels = c("0/0/0", "1/0/0", "0/1/0", "1/1/0", "0/0/1", "1/0/1", "0/1/1", "1/1/1"))
p <- by(dat$prop,
list(dat$P, dat$A, dat$V), mean)
for(i in 1:nrow(dat)){
points(p[i] ~ c(i - .05), pch = 16, col = "black", cex = 1.2)
points(pred.p[i] ~ c(i + .05), pch = 16, col = "blue", cex = 1.2)
lines(x = rep(i + .05, 2), y = pred.p.HPDI[, i], col = rgb(0, 0, 1, alpha = .5), lwd = 2)
}
legend("topright", c("Observed", "Predicted"), col = c("blue", "black"), pch = 16)
quartz()
## Plot model predictions
dat.pred <- expand.grid(P = c(0, 1), A = c(0, 1), V = c(0, 1))
link.m.eagles <- link(m.eagles, data = dat.pred)
pred.p <- apply(link.m.eagles, 2, mean)
pred.p.HPDI <- apply(link.m.eagles, 2, HPDI, prob = .89)
par(mfrow = c(1, 2)) # will be adding another plot later
plot(0, 0, type = "n", xlab = "Pirate/Adult/Victim", ylab = "Success probability",
ylim = c(0, 1), xlim = c(1, 8), xaxt = "n", main = "m.eagles")
axis(1, at = 1:8, labels = c("0/0/0", "1/0/0", "0/1/0", "1/1/0", "0/0/1", "1/0/1", "0/1/1", "1/1/1"))
p <- by(dat$prop,
list(dat$P, dat$A, dat$V), mean)
for(i in 1:nrow(dat)){
points(p[i] ~ c(i - .05), pch = 16, col = "black", cex = 1.2)
points(pred.p[i] ~ c(i + .05), pch = 16, col = "blue", cex = 1.2)
lines(x = rep(i + .05, 2), y = pred.p.HPDI[, i], col = rgb(0, 0, 1, alpha = .5), lwd = 2)
}
legend("topright", c("Observed", "Predicted"), col = c("blue", "black"), pch = 16)
961+1315+1282+1653
1653/5211
3800*3
install.packages("swirl")
library(swirl)
18*40*52
170*5*52
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
# Setting working directory
setwd("~/Documents/git/regionalrisk/analyses/")
########################
#### get the data - must choose the dataframe for specific analyses
#fs<-read.csv("output/fs_allspp_dvr.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_five.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_original.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_fullleaf.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_midleaf.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_midleaf_temps.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_origtemps.csv", header=TRUE)
fs<-read.csv("output/fs_allspp_longtemps.csv", header=TRUE)
fs<-subset(fs, select=c("lat", "long", "fs.count", "year", "species", "fs"))
mat<-read.csv("output/mat_MAM.csv", header=TRUE)
mat<-subset(mat, year>1950)
elev<-read.csv("output/fs_bb_sitedata.csv", header=TRUE)
elev<-subset(elev, year>1950)
nao<-read.csv("output/nao_NovApr.csv", header=TRUE)
nao<-subset(nao, year>1950)
elev<-dplyr::select(elev, species, LAT, LON, ALT)
elev<-elev%>%dplyr::rename(lat=LAT)%>%dplyr::rename(long=LON)%>%dplyr::rename(elev=ALT)
elev$lat.long<-paste(elev$lat, elev$long)
elev<-elev[!duplicated(elev),]
matelev<-full_join(elev, mat)
#### Get elevation information
matelev$cc<-ifelse(matelev$year<=1983&matelev$year>1950, 0, 1)
fs<-dplyr::select(fs, lat, long, species, fs.count, year)
fs<-fs[!duplicated(fs),]
fspreds<-full_join(matelev, fs)
fspreds<-na.omit(fspreds)
fspreds<-fspreds[!duplicated(fspreds),]
fspreds$elev<-ave(fspreds$elev, fspreds$lat.long)
fspreds<-fspreds[!duplicated(fspreds),]
nao<-dplyr::select(nao, year, nao)
nao<-nao[!duplicated(nao),]
fspreds<-full_join(fspreds, nao)
dist<-read.csv("output/dist_wgs.csv", header=TRUE)
dist<-dist%>%dplyr::rename(long=LONG)%>%dplyr::rename(lat=LAT)
fspreds<-full_join(fspreds, dist)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_five_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_fullleaf_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_midleaf_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_midleaftemps_allpred.csv", row.names = FALSE)
write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_longtemps_allpred.csv", row.names = FALSE)
########################
#### get the data - must choose the dataframe for specific analyses
#fs<-read.csv("output/fs_allspp_dvr.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_five.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_original.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_fullleaf.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_midleaf.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_midleaf_temps.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_origtemps.csv", header=TRUE)
#fs<-read.csv("output/fs_allspp_longtemps.csv", header=TRUE)
fs<-read.csv("output/fs_allspp_dvrtemps.csv", header=TRUE)
fs<-subset(fs, select=c("lat", "long", "fs.count", "year", "species", "fs"))
mat<-read.csv("output/mat_MAM.csv", header=TRUE)
mat<-subset(mat, year>1950)
elev<-read.csv("output/fs_bb_sitedata.csv", header=TRUE)
elev<-subset(elev, year>1950)
nao<-read.csv("output/nao_NovApr.csv", header=TRUE)
nao<-subset(nao, year>1950)
elev<-dplyr::select(elev, species, LAT, LON, ALT)
elev<-elev%>%dplyr::rename(lat=LAT)%>%dplyr::rename(long=LON)%>%dplyr::rename(elev=ALT)
elev$lat.long<-paste(elev$lat, elev$long)
elev<-elev[!duplicated(elev),]
matelev<-full_join(elev, mat)
#### Get elevation information
matelev$cc<-ifelse(matelev$year<=1983&matelev$year>1950, 0, 1)
fs<-dplyr::select(fs, lat, long, species, fs.count, year)
fs<-fs[!duplicated(fs),]
fspreds<-full_join(matelev, fs)
fspreds<-na.omit(fspreds)
fspreds<-fspreds[!duplicated(fspreds),]
fspreds$elev<-ave(fspreds$elev, fspreds$lat.long)
fspreds<-fspreds[!duplicated(fspreds),]
nao<-dplyr::select(nao, year, nao)
nao<-nao[!duplicated(nao),]
fspreds<-full_join(fspreds, nao)
dist<-read.csv("output/dist_wgs.csv", header=TRUE)
dist<-dist%>%dplyr::rename(long=LONG)%>%dplyr::rename(lat=LAT)
fspreds<-full_join(fspreds, dist)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_five_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_fullleaf_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_midleaf_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_midleaftemps_allpred.csv", row.names = FALSE)
#write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_longtemps_allpred.csv", row.names = FALSE)
write.csv(fspreds, file="~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvrtemps_allpred.csv", row.names = FALSE)
