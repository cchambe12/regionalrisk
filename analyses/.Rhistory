## to start
rm(list=ls())
options(stringsAsFactors=FALSE)
## load packages
packs.to.extract<-list('raster','foreach')
lapply(packs.to.extract,require, character.only=T)
## Get data. Here it is simulated it but can be read/imported as usually
# dat<-read.csv("XXX.csv")
dat=as.data.frame(matrix(rnorm(10000),ncol=100))
colnames(dat)<-c("y",paste("X",seq(1,9,1),sep=""))
write.csv(dat, file="~/Desktop/dat.csv")
## Get data. Here it is simulated it but can be read/imported as usually
dat<-read.csv("/n/wolkovich_lab/Lab/Cat/dat.csv")
#generate nested list to store model results
storing<-list()
## looping
for (i in 2:100){
storing[[i]]<-list()
for (j in 2:100){
print(paste(i,j,sep="."))
if(i<j){
mod.1<-lm(y~dat[,i]+dat[,j],data=dat)
storing[[i]][[j]]<-mod.1
}
}
}
## generate table summarizing some results
coeffs<-array(NA,dim=c(98,3))
for(i in 1:98){
coeffs[i,]<-storing[[2]][3:100][[i]]$coefficients
}
## saving results to memory
#save.image()
write.csv(coeffs, "/n/wolkovich_lab/Lab/Cat/some.coefficients.csv")
## I am fairly simple file for testing ##
library("car")
## I am fairly simple file for testing ##
#library("car")
x <- c(1,2,3,4)
y <- c(2,4,6,11)
foo <- anova(lm(x~y))
save(foo, file = "foo.RData")
load("/private/var/folders/24/gxkvcqyd525_zhq0nyldzv6c0000gn/T/fz3temp-2/foo.RData")
View(foo)
brm.simple
bb.stan<-read.csv("~/Documents/git/regionalrisk/analyses/output/bb.brm.nointer.csv")
bb.stan<-subset(bb.stan, select=c("fs.count", "m.index", "sp.temp", "cc", "sm.elev"))
bb.stan<-bb.stan[!duplicated(bb.stan),]
bb.stan<-na.omit(bb.stan)
bb.stan<-read.csv("~/Documents/git/regionalrisk/analyses/output/bb.brm.nointer.csv")
bb.stan<-subset(bb.stan, select=c("fs.count", "m.index", "sp.temp", "cc", "sm.elev", "species"))
bb.stan<-bb.stan[!duplicated(bb.stan),]
bb.stan<-na.omit(bb.stan)
cent_intrnd_gaus
load("/Users/CatherineChamberlain/Documents/git/regionalrisk/nospace_cen_allrnd_gaus.Rdata")
nospace_cent_allrnd_gaus
load("/Users/CatherineChamberlain/Documents/git/regionalrisk/nospace_intrnd_gaus.Rdata")
nospace_intrnd_gaus
rm(list=ls())
options(stringsAsFactors = FALSE)
library(ggplot2)
library(rstanarm)
library(dplyr)
library(tidyr)
library(brms)
library(ggstance)
library(jtools)
#library(ggmap)
#library(rworldmap)
#library(maps)
#library(mapdata)
#library(marmap)
#library(RColorBrewer)
#library(raster)
# Setting working directory
setwd("~/Documents/git/regionalrisk/analyses/")
dx<-read.csv("output/fs_matspspace_times2.csv", header=TRUE)
dx<-subset(dx, year>1950)
dx<-dx%>%dplyr::select(lat, long, space)
dx<-dx[!duplicated(dx),]
xx<-read.csv("output/fs_yearsitespp.csv", header=TRUE)
xx<-subset(xx, year>1950)
df<-read.csv("output/mat_fulldata.csv", header=TRUE)
df<-subset(df, year>1950)
mat<-read.csv("output/fs_bb_sitedata.csv", header=TRUE)
mat<-subset(mat, year>1950)
nao<-read.csv("output/nao_year_sp.csv", header=TRUE)
nao<-subset(nao, year>1950)
### Clean up dataframes a bit
dx<-full_join(df, dx)
dx<-dx[!duplicated(dx),]
mat<-dplyr::select(mat, species, LAT, LON, ALT)
mat<-mat%>%rename(lat=LAT)%>%rename(long=LON)%>%rename(elev=ALT)
mat$lat.long<-paste(mat$lat, mat$long)
mat<-mat[!duplicated(mat),]
bb<-full_join(mat, dx)
#### Get elevation information
bb<-bb%>%rename(sp.temp=pre.bb)
bb$cc<-ifelse(bb$year<=1983&bb$year>1950, 0, 1)
xx<-dplyr::select(xx, lat, long, species, fs.count, year)
xx<-xx[!duplicated(xx),]
bb<-full_join(bb, xx)
bb<-bb[!duplicated(bb),]
bb$fs.count<-ave(bb$fs.count, bb$year, bb$lat.long, bb$species, FUN=last)
bb$elev<-ave(bb$elev, bb$lat.long)
bb<-bb[!duplicated(bb),]
bb<-na.omit(bb)
nao<-dplyr::select(nao, species, year, m.index)
nao<-nao[!duplicated(nao),]
bb<-full_join(bb, nao)
View(bb)
check<-subset(bb, select=c("elev", "lat.long", "space", "sp.temp"))
check<-check[!duplicated(check),]
View(check)
check<-subset(bb, select=c("elev", "lat.long", "space"))
check<-check[!duplicated(check),]
tar.var<-c("species", "year", "lat.long")
resp.var<-c("fs.count")
bb.sub<-bb[,c(tar.var, resp.var)]
bb.sub.nodup<-bb[!duplicated(bb.sub),]
dd<-bb.sub.nodup
dd$space<-round(dd$space, digits=3)
dd<-dd[!duplicated(dd),]
write.csv(dd, file="~/Documents/git/regionalrisk/analyses/output/regrisk.cleaned.2.csv", row.names = FALSE)
d<-read.csv("~/Documents/git/regionalrisk/analyses/output/regrisk.cleaned.2.csv", header=TRUE)
library(ggmap)
map<-get_map(location="Europe", zoom=4)
mapPoints<-ggmap(map) + geom_point(x=d$long, y=d$lat, aes(col=d$space), data=d) + facet_wrap(~species) +
theme(legend.position = "none")
map<-get_map(location="Europe", zoom=4)
mapPoints<-ggmap(map) + geom_point(x=d$long, y=d$lat, aes(col=d$space), data=d) + facet_wrap(~species) +
theme(legend.position = "none")
mapPoints
space<-ggplot(sp, aes(x=long, y=lat)) + geom_point(aes(col=space))
sp<-subset(d, select=c("space", "long", "lat"))
sp<-sp[!duplicated(sp),]
space<-ggplot(sp, aes(x=long, y=lat)) + geom_point(aes(col=space))
space
quartz()
bbs<-bb[sample(nrow(bb), 60000),]
lat<-ggplot(d, aes(x=lat, y=space)) + geom_point(aes(col=as.factor(species))) +
facet_wrap(~species) + theme(legend.position = "none")
lat
long<-ggplot(d, aes(x=long, y=space)) + geom_point(aes(col=as.factor(species))) +
facet_wrap(~species) + theme(legend.position = "none")
long
quartz()
elev<-ggplot(d, aes(x=elev, y=space)) + geom_point(aes(col=as.factor(species))) +
facet_wrap(~species) + theme(legend.position = "none")
elev
mat<-ggplot(d, aes(x=sp.temp, y=space)) + geom_point(aes(col=as.factor(species))) +
facet_wrap(~species) + theme(legend.position = "none")
mat
spp.nao<-unique(ave(bb$m.index, bb$species))
spp.mat<-unique(ave(bb$sp.temp, bb$species))
spp.cc<-as.matrix(unique(ave(bb$cc, bb$species)))
bb$nao.cc<-bb$m.index*bb$cc
bb$mat.cc<-bb$sp.temp*bb$cc
bb$elev.cc<-bb$sm.elev*bb$cc
bb$space.cc<-bb$space*bb$cc
bb$space.elev<-bb$space*bb$sm.elev
bb<-d
bb$sm.elev<-bb$elev/100
spp.nao<-unique(ave(bb$m.index, bb$species))
spp.mat<-unique(ave(bb$sp.temp, bb$species))
spp.cc<-as.matrix(unique(ave(bb$cc, bb$species)))
bb$nao.cc<-bb$m.index*bb$cc
bb$mat.cc<-bb$sp.temp*bb$cc
bb$elev.cc<-bb$sm.elev*bb$cc
bb$space.cc<-bb$space*bb$cc
bb$space.elev<-bb$space*bb$sm.elev
hist(bb$sm.elev)
ben<-lm(fs.count~m.index*species+sp.temp*species+cc*species+sm.elev+space+m.index:cc + sp.temp:cc +sm.elev:cc +
space:cc + space:sm.elev, data=bb)             # not necessary in this case
b <- coef(ben)[-1]
R <- qr.R(ben$qr)[-1,-1]
SSR <- crossprod(ben$residuals)[1]
not_NA <- !is.na(fitted(ben))
N <- sum(not_NA)
xbar <- c(as.numeric(mean(bb$m.index)), as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FAGSYL")), as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$cc)),
as.numeric(mean(bb$sm.elev)), as.numeric(mean(bb$space)),
as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FAGSYL"])), as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])),
as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FAGSYL"])), as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])), as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])), as.numeric(mean(bb$cc[bb$species=="FAGSYL"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)), as.numeric(mean(bb$space*bb$sm.elev)))
xbarnames<-colnames(R)
names(xbar)<-xbarnames
y <- bb$fs.count[not_NA]
ybar <- mean(y)
s_y <- sd(y)
post.inter <- stan_biglm.fit(b, R, SSR, N, xbar, ybar, s_y, prior = R2(.75),
# the next line is only to make the example go fast
chains = 4, iter = 2000)
xbar
colnames(bb)
head(bb)
as.numeric(mean(bb$m.index))
class(bb$m.index)
as.numeric(mean(bb$cc[bb$species=="FAGSYL"]))
as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"]))
as.numeric(mean(bb$m.index[bb$species=="BETPEN"]))
as.numeric(mean(bb$m.index))
nas<-bb[is.na(bb),]
View(nas)
bb<-na.omit(bb)
b <- coef(ben)[-1]
R <- qr.R(ben$qr)[-1,-1]
SSR <- crossprod(ben$residuals)[1]
not_NA <- !is.na(fitted(ben))
N <- sum(not_NA)
xbar <- c(as.numeric(mean(bb$m.index)), as.numeric(as.factor("ALNGLU")), as.numeric(as.factor("BETPEN")),
as.numeric(as.factor("FAGSYL")), as.numeric(as.factor("FRAEXC")), as.numeric(as.factor("QUEROB")),
as.numeric(mean(bb$sp.temp)), as.numeric(mean(bb$cc)),
as.numeric(mean(bb$sm.elev)), as.numeric(mean(bb$space)),
as.numeric(mean(bb$m.index[bb$species=="ALNGLU"])), as.numeric(mean(bb$m.index[bb$species=="BETPEN"])),
as.numeric(mean(bb$m.index[bb$species=="FAGSYL"])), as.numeric(mean(bb$m.index[bb$species=="FRAEXC"])),
as.numeric(mean(bb$m.index[bb$species=="QUEROB"])),
as.numeric(mean(bb$sp.temp[bb$species=="ALNGLU"])), as.numeric(mean(bb$sp.temp[bb$species=="BETPEN"])),
as.numeric(mean(bb$sp.temp[bb$species=="FAGSYL"])), as.numeric(mean(bb$sp.temp[bb$species=="FRAEXC"])),
as.numeric(mean(bb$sp.temp[bb$species=="QUEROB"])), as.numeric(mean(bb$cc[bb$species=="ALNGLU"])),
as.numeric(mean(bb$cc[bb$species=="BETPEN"])), as.numeric(mean(bb$cc[bb$species=="FAGSYL"])),
as.numeric(mean(bb$cc[bb$species=="FRAEXC"])), as.numeric(mean(bb$cc[bb$species=="QUEROB"])),
as.numeric(mean(bb$m.index*bb$cc)), as.numeric(mean(bb$sp.temp*bb$cc)), as.numeric(mean(bb$sm.elev*bb$cc)),
as.numeric(mean(bb$space*bb$cc)), as.numeric(mean(bb$space*bb$sm.elev)))
xbarnames<-colnames(R)
names(xbar)<-xbarnames
y <- bb$fs.count[not_NA]
ybar <- mean(y)
s_y <- sd(y)
post.inter <- stan_biglm.fit(b, R, SSR, N, xbar, ybar, s_y, prior = R2(.75),
# the next line is only to make the example go fast
chains = 4, iter = 2000)
cbind(lm = b, stan_lm = rstan::get_posterior_mean(post)[27:29,]) # shrunk
cbind(lm = b, stan_lm = rstan::get_posterior_mean(post.inter)[27:29,]) # shrunk
post.inter
library(jtools)
nao<-interact_plot(model = post.inter, pred = m.index, modx = cc)
plot_model(post.inter, type = "pred", terms = c("m.index", "cc"))
library(sjPlot)
library(sjPlot)
